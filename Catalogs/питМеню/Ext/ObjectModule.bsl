#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// TODO: Когда будет добавлен реквизит СтатусСинхронизацииSimphony
	// Сейчас логика закомментирована, так как реквизиты еще не добавлены
	
	// Определяем, нужно ли ставить в очередь
	// ТребуетсяВыгрузка = Ложь;
	
	// Если ЭтоНовый() Тогда
		
	//     // Новая позиция - всегда в очередь
	//     ТребуетсяВыгрузка = Истина;
	//     СтатусСинхронизацииSimphony = Перечисления.MRS_СтатусыСинхронизацииSimphony.НеВыгружено;
		
	// Иначе
		
	//     // Изменение существующей позиции
	//     Если Модифицированность() Тогда
			
	//         // Проверяем, изменились ли поля, требующие синхронизации
	//         ИзмененныеПоля = Новый Массив;
	//         ИзмененныеПоля.Добавить("Наименование");
	//         ИзмененныеПоля.Добавить("Номенклатура");
	//         ИзмененныеПоля.Добавить("НомерВГруппе");
	//         ИзмененныеПоля.Добавить("Выключен");
			
	//         ДанныеДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИзмененныеПоля);
			
	//         Для Каждого Поле Из ИзмененныеПоля Цикл
				
	//             Если ЭтотОбъект[Поле] <> ДанныеДоИзменения[Поле] Тогда
	//                 ТребуетсяВыгрузка = Истина;
	//                 Прервать;
	//             КонецЕсли;
				
	//         КонецЦикла;
			
	//     КонецЕсли;
		
	// КонецЕсли;
	
	// Если ТребуетсяВыгрузка Тогда
		
	//     // Получаем кассовый узел
	//     // TODO: Определить логику получения кассового узла
	//     // Возможно, через вид меню или другую связь
	//     КассовыйУзел = ПолучитьКассовыйУзелДляПозиции();
		
	//     Если ЗначениеЗаполнено(КассовыйУзел) Тогда
			
	//         Операция = ?(ЗначениеЗаполнено(КодSimphony), "UPDATE", "CREATE");
	//         MRS_ИнтеграцияSimphonyСервер.ДобавитьВОчередьВыгрузки(Ссылка, Операция, КассовыйУзел);
			
	//     КонецЕсли;
		
	// КонецЕсли;
	
КонецПроцедуры

&После("ПередУдалением")
Процедура MRS_ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// TODO: Когда будет добавлен реквизит КодSimphony
	// Если позиция выгружена в Simphony, ставим на удаление в очередь
	
	// Если ЗначениеЗаполнено(КодSimphony) Тогда
		
	//     КассовыйУзел = ПолучитьКассовыйУзелДляПозиции();
		
	//     Если ЗначениеЗаполнено(КассовыйУзел) Тогда
	//         MRS_ИнтеграцияSimphonyСервер.ДобавитьВОчередьВыгрузки(Ссылка, "DELETE", КассовыйУзел);
	//     КонецЕсли;
		
	// КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает кассовый узел для позиции меню
//
// Возвращаемое значение:
//  ПланОбменаСсылка.питУдаленныеКассы - кассовый узел
//
Функция ПолучитьКассовыйУзелДляПозиции()
	
	// TODO: Реализовать логику получения кассового узла
	// Варианты:
	// 1. Через вид меню (если есть связь)
	// 2. Через реквизит владельца
	// 3. Через константу "основной кассовый узел"
	
	// Временная заглушка - получаем первый кассовый узел
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	питУдаленныеКассы.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.питУдаленныеКассы КАК питУдаленныеКассы
		|ГДЕ
		|	НЕ питУдаленныеКассы.ЭтотУзел";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецЕсли

