// Модуль формы элемента справочника.
Перем СпособРасчетаРецептур;  			// Способ подбора основной рецептуры для блюда.
Перем ЦветФонаПоУмолчанию;    // Цвет фона кнопки, если он явно не задан.

&НаКлиенте
Перем КаталогКартинок;        // Каталог картинок для "гибких" кнопок.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Обновляет надписи на форме
//
Процедура ОбновитьНадписи()
	
	Если ПустаяСтрока(Объект.ИмяКартинки) Тогда
		Элементы.тКартинка.Заголовок = "Выбор картинки";
	Иначе
		Элементы.тКартинка.Заголовок = Объект.ИмяКартинки;
		Элементы.тОчистить.Заголовок = "Очистить";
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНадписи()

&НаСервере
// Проверяет вид номенклатуры на допустимость для добавления в меню.
//  Номенклатура - проверяемый элемент номенклатуры.
//
// Возвращаемое значение:
//  ТекстОшибки - текст ошибки, если вид номенклатуры не допустимый.
//  Булево      – Истина, если эту номенклатуру можно добавлять в меню.
//
Функция ПроверитьДопустимыйВидНоменклатуры(Номенклатура, ТекстОшибки="")
	
	ТекстОшибки="";
	
	Если Номенклатура.ЭтоГруппа ИЛИ Номенклатура.Пустая() Тогда
		Возврат Истина;
	Иначе
		ВидНоменклатуры = Номенклатура.питВидНоменклатуры;
		Если ВидНоменклатуры = Перечисления.питВидыНоменклатуры.Блюдо
			ИЛИ ВидНоменклатуры = Перечисления.питВидыНоменклатуры.Товар
			ИЛИ ВидНоменклатуры = Перечисления.питВидыНоменклатуры.БизнесЛанч
			ИЛИ ВидНоменклатуры = Перечисления.питВидыНоменклатуры.Услуга Тогда
			Возврат Истина;
		Иначе
			ТекстОшибки = "Меню может содержать только номенклатуру вида: блюдо, услуга, товар, бизнес-ланч.";
			Объект.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПроверитьДопустимыйВидНоменклатуры()

&НаСервере
// Возвращает максимальный номер в группе.
//
// Возвращаемое значение:
//	Число - максимальный номер в группе справочника "питМеню".
//
Функция ПолучитьМаксимальныйНомерВГруппе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Меню.НомерВГруппе), 0) КАК НомерВГруппе
	|ИЗ
	|	Справочник.питМеню КАК Меню
	|ГДЕ
	|	Меню.Родитель = &Родитель
	|	И Меню.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Родитель", Объект.Родитель);
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	
	Результат	= Запрос.Выполнить();
	Выборка		= Результат.Выбрать();
	МаксНомер	= 0;
	Если Выборка.Следующий() Тогда
		МаксНомер	= Выборка.НомерВГруппе;
	КонецЕсли;
	Возврат МаксНомер;	
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеРеквизитовПриСменеНоменклатуры()
	Объект.Наименование = Объект.Номенклатура.Наименование;
	
	Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Если НЕ ЗначениеЗаполнено(СпособРасчетаРецептур) Тогда
			//СпособРасчетаРецептур	= Константы.питСпособРасчетаРецептур.Получить();
			СпособРасчетаРецептур	= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("СпособРасчетаРецептур");
		КонецЕсли;	
		
		Если Объект.Номенклатура.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Блюдо Тогда
			Объект.Рецептура	= питПроизводство.ВернутьОсновнуюРецептуру(Объект.Номенклатура,,Перечисления.питХозяйственныеОперации.РецептураПриготовление,ТекущаяДата(),СпособРасчетаРецептур);
		Иначе
			Объект.Рецептура = Документы.питРецептура.ПустаяСсылка();
		КонецЕсли;
		
		//Объект.ЕдиницаИзмерения = Объект.Номенклатура.ЕдиницаИзмерения;
		Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(Объект.Номенклатура, Элементы.ЕдиницаИзмерения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	// Проверим, можно ли использовать номенклатуру.	
	ТекстОшибки = "";
	Если НЕ ПроверитьДопустимыйВидНоменклатуры(Объект.Номенклатура, ТекстОшибки) Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли; 
	
	УстановитьЗначениеРеквизитовПриСменеНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура тОчиститьНажатие(Элемент)
	Объект.ИмяКартинки = "";
	КартинкаКлавиши = "";
	ОбновитьНадписи();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура тКартинкаНажатие(Элемент)
	НачатьПоискФайлов(Новый ОписаниеОповещения("тКартинкаНажатие_Завершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), КаталогКартинок);
КонецПроцедуры

&НаКлиенте
Процедура тКартинкаНажатие_Завершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		НачатьСозданиеКаталога(Новый ОписаниеОповещения("тКартинкаНажатие_Завершение_Завершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), КаталогКартинок);
		Возврат;
	КонецЕсли;
	
	тКартинкаНажатие_ЗавершениеФрагмент(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура тКартинкаНажатие_Завершение_Завершение(ИмяКаталога, ДополнительныеПараметры1) Экспорт
	
	Элемент = ДополнительныеПараметры1.Элемент;
	
	
	тКартинкаНажатие_ЗавершениеФрагмент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура тКартинкаНажатие_ЗавершениеФрагмент(Знач Элемент)
	
	Перем Адрес, ДиалогВыбораФайла, Картинка, ПолноеИмяФайла, СтандартнаяОбработка;
	
	СтандартнаяОбработка=Ложь;
	ДиалогВыбораФайла=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок="Выберите файл с картинкой";
	ДиалогВыбораФайла.ПредварительныйПросмотр=Ложь;
	ДиалогВыбораФайла.ИндексФильтра=0;
	ДиалогВыбораФайла.Каталог = КаталогКартинок;
	//
	Если Элемент.Заголовок = "Выбор картинки" Тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = "";
	Иначе
		ДиалогВыбораФайла.ПолноеИмяФайла = КаталогКартинок + Элемент.Заголовок;
	КонецЕсли; 
	//
	ДиалогВыбораФайла.Фильтр="Файлы BMP (*.bmp)|*.bmp|Файлы JPEG (*.jpg)|*.jpg";
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла=Истина;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Истина;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("тКартинкаНажатие_ЗавершениеФрагмент_Завершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла, ПолноеИмяФайла", ДиалогВыбораФайла, ПолноеИмяФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура тКартинкаНажатие_ЗавершениеФрагмент_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		// Необходимо проверить откуда выбран файл. Из каталога Images или из какого-либо другого.
		Если Найти(ДиалогВыбораФайла.ПолноеИмяФайла,КаталогКартинок) = 0 Тогда
			// Выбор НЕ из каталога Images.
			// Следует скопировать картинку в папку Images
			Объект.ИмяКартинки = СтрЗаменить(ДиалогВыбораФайла.ПолноеИмяФайла, ДиалогВыбораФайла.Каталог, "");
			ПолноеИмяФайла = КаталогКартинок + Объект.ИмяКартинки;
			НачатьКопированиеФайла(Новый ОписаниеОповещения("тКартинкаНажатие_ЗавершениеФрагмент_Завершение_Завершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла, ПолноеИмяФайла", ДиалогВыбораФайла, ПолноеИмяФайла)), ДиалогВыбораФайла.ПолноеИмяФайла, ПолноеИмяФайла);
			Возврат;
			
		Иначе
			// Выбор НЕ из каталога Images.
			// Ничего копировать не надо.
			Объект.ИмяКартинки = СтрЗаменить(ДиалогВыбораФайла.ПолноеИмяФайла,КаталогКартинок,"");
			ПолноеИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			
		КонецЕсли;
		тКартинкаНажатие_ЗавершениеФрагмент_ЗавершениеФрагмент(ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тКартинкаНажатие_ЗавершениеФрагмент_Завершение_Завершение(СкопированныйФайл, ДополнительныеПараметры1) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры1.ДиалогВыбораФайла;
	ПолноеИмяФайла = ДополнительныеПараметры1.ПолноеИмяФайла;
	
	
	тКартинкаНажатие_ЗавершениеФрагмент_ЗавершениеФрагмент(ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура тКартинкаНажатие_ЗавершениеФрагмент_ЗавершениеФрагмент(Знач ПолноеИмяФайла)
	
	Перем Адрес, Картинка;
	
	Картинка = Новый Картинка(ПолноеИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(Картинка,Адрес); 
	КартинкаКлавиши = Адрес;
	ОбновитьНадписи();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКлавишиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	тКартинкаНажатие(Элемент);
КонецПроцедуры

&НаСервере
Функция ТоварУникаленВПрайсе()
	Если Объект.Владелец.ФлагУникальности И НЕ Справочники.питМеню.ТоварУникаленВПрайсе(Объект) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	питИзменениеОтраслевыхФормСервер.ПриСозданииНаСервереВНачале(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(Объект.Номенклатура, Элементы.ЕдиницаИзмерения);
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Владелец") Тогда
		Элементы.Владелец.Видимость = Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.Ссылка)  Тогда
		Попытка
			Картинка = Новый Картинка(КаталогКартинок + Объект.ИмяКартинки);
			Адрес = ПоместитьВоВременноеХранилище(Картинка,Адрес); 
			КартинкаКлавиши = Адрес;
			
		Исключение КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(Объект.ИмяКартинки) Тогда
			Попытка
				Картинка = Новый Картинка(КаталогКартинок + Объект.ИмяКартинки);
				Адрес = ПоместитьВоВременноеХранилище(Картинка,Адрес);
				КартинкаКлавиши = Адрес;
			Исключение КонецПопытки;
		КонецЕсли;
		МаксНомер = ПолучитьМаксимальныйНомерВГруппе();
		Объект.НомерВГруппе = МаксНомер + 1;
	КонецЕсли;
	ОбновитьНадписи();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Объект.Номенклатура.Наименование;
	КонецЕсли;
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		Если Не ТоварУникаленВПрайсе() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Товар не уникален в меню <" + Объект.Владелец + ">";
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

#Область УправлениеСвойствами

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
КонецПроцедуры

#КонецОбласти


КаталогКартинок = питОбщегоНазначения.ПолучитьКаталогКомпонентыЗащиты() + "Images\";
