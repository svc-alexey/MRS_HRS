////////////////////////////////////////////////////////////////////////////////
// ФОРМА МОНИТОРИНГА СИНХРОНИЗАЦИИ МЕНЮ С SIMPHONY
// 
// Описание:
//   Форма для просмотра истории синхронизации позиций меню с Oracle Simphony POS
//   Отображает детальную информацию об успешных выгрузках и ошибках
//

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация значений по умолчанию
	ПериодС = НачалоДня(ТекущаяДата() - 7 * 86400); // 7 дней назад
	ПериодПо = КонецДня(ТекущаяДата());
	ТолькоСОшибками = Ложь;
	ОтборСтатус = "Все";
	ОтборОперация = "Все";
	
	// Если передана позиция меню - устанавливаем отбор
	Если Параметры.Свойство("ПозицияМеню") И ЗначениеЗаполнено(Параметры.ПозицияМеню) Тогда
		ПозицияМеню = Параметры.ПозицияМеню;
		Элементы.ПозицияМеню.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Заполняем список истории
	ОбновитьСписокИстории();
	
	// Настраиваем условное оформление
	НастроитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсторииПриАктивизацииСтроки(Элемент)
	
	// Обновляем панель детализации
	ОбновитьПанельДетализации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокИстории();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсторию(Команда)
	
	// Подтверждение удаления
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Удалить");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОчиститьИсториюЗавершение", ЭтотОбъект),
		"Будут удалены записи истории старше 30 дней. Продолжить?",
		Кнопки);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КоличествоУдаленных = ОчиститьИсториюНаСервере();
		
		ПоказатьОповещениеПользователя(
			"История очищена",
			,
			СтрШаблон("Удалено записей: %1", КоличествоУдаленных));
			
		ОбновитьСписокИстории();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	
	// Выгружаем таблицу истории в Excel
	ТабличныйДокумент = СформироватьТабличныйДокументИстории();
	ТабличныйДокумент.Показать("История синхронизации меню");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтбор(Команда)
	
	ОбновитьСписокИстории();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПозициюМеню(Команда)
	
	ТекущиеДанные = Элементы.СписокИстории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПозицияМеню) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ПозицияМеню);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьСписокИстории()
	
	// Формируем запрос к регистру истории
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	История.ДатаВремя КАК ДатаВремя,
	|	История.ПозицияМеню КАК ПозицияМеню,
	|	История.Операция КАК Операция,
	|	История.Статус КАК Статус,
	|	История.HTTPСтатус КАК HTTPСтатус,
	|	История.Сообщение КАК Сообщение,
	|	История.Пользователь КАК Пользователь,
	|	История.ДлительностьМс КАК ДлительностьМс,
	|	История.УникальныйИдентификатор КАК УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.MRS_ИсторияСинхронизацииМенюSimphony КАК История
	|ГДЕ
	|	История.ДатаВремя МЕЖДУ &ПериодС И &ПериодПо
	|	И (&ПозицияМеню = ЗНАЧЕНИЕ(Справочник.питМеню.ПустаяСсылка)
	|		ИЛИ История.ПозицияМеню = &ПозицияМеню)
	|	И (&ТолькоСОшибками = ЛОЖЬ
	|		ИЛИ История.Статус В (&СтатусыОшибок))
	|	И (&ОтборСтатус = """"
	|		ИЛИ &ОтборСтатус = ""Все""
	|		ИЛИ История.Статус = &ОтборСтатус)
	|	И (&ОтборОперация = """"
	|		ИЛИ &ОтборОперация = ""Все""
	|		ИЛИ История.Операция = &ОтборОперация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	История.ДатаВремя УБЫВ";
	
	Запрос.УстановитьПараметр("ПериодС", ПериодС);
	Запрос.УстановитьПараметр("ПериодПо", ПериодПо);
	Запрос.УстановитьПараметр("ПозицияМеню", ?(ЗначениеЗаполнено(ПозицияМеню), ПозицияМеню, 
		Справочники.питМеню.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ТолькоСОшибками", ТолькоСОшибками);
	
	МассивСтатусовОшибок = Новый Массив;
	МассивСтатусовОшибок.Добавить("Ошибка");
	МассивСтатусовОшибок.Добавить("Таймаут");
	Запрос.УстановитьПараметр("СтатусыОшибок", МассивСтатусовОшибок);
	
	Запрос.УстановитьПараметр("ОтборСтатус", ОтборСтатус);
	Запрос.УстановитьПараметр("ОтборОперация", ОтборОперация);
	
	Результат = Запрос.Выполнить();
	СписокИстории.Загрузить(Результат.Выгрузить());
	
	// Обновляем заголовок формы
	Элементы.ГруппаСписок.Заголовок = СтрШаблон("История синхронизации (%1 записей)", СписокИстории.Количество());
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформление()
	
	// Очищаем существующее условное оформление
	УсловноеОформление.Элементы.Очистить();
	
	// Зеленый текст для успешных операций
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокИсторииСтатус");
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИстории.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Успешно";
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЗеленыйЛес);
	
	// Красный текст для ошибок
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокИсторииСтатус");
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИстории.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Ошибка";
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	// Оранжевый текст для таймаутов
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокИсторииСтатус");
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИстории.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Таймаут";
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Оранжевый);
	
	// Полужирный для записей за последние 24 часа
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокИстории");
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокИстории.ДатаВремя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата() - 86400;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельДетализации()
	
	ТекущиеДанные = Элементы.СписокИстории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ДеталиЗапроса = "";
		Возврат;
		
	КонецЕсли;
	
	// Формируем текст детализации
	Детали = "";
	Детали = Детали + "X-Correlation-Id: " + ТекущиеДанные.УникальныйИдентификатор + Символы.ПС;
	Детали = Детали + Символы.ПС;
	Детали = Детали + СтрШаблон("HTTP-статус: %1", ТекущиеДанные.HTTPСтатус) + Символы.ПС;
	Детали = Детали + СтрШаблон("Длительность: %1 мс", ТекущиеДанные.ДлительностьМс) + Символы.ПС;
	Детали = Детали + Символы.ПС;
	Детали = Детали + "Сообщение:" + Символы.ПС;
	Детали = Детали + ТекущиеДанные.Сообщение;
	
	ДеталиЗапроса = Детали;
	
КонецПроцедуры

&НаСервере
Функция ОчиститьИсториюНаСервере()
	
	// Удаляем записи старше 30 дней
	ДатаГраницы = ТекущаяДата() - 30 * 86400;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	История.ПозицияМеню КАК ПозицияМеню,
	|	История.ДатаВремя КАК ДатаВремя,
	|	История.УникальныйИдентификатор КАК УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.MRS_ИсторияСинхронизацииМенюSimphony КАК История
	|ГДЕ
	|	История.ДатаВремя < &ДатаГраницы";
	
	Запрос.УстановитьПараметр("ДатаГраницы", ДатаГраницы);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.MRS_ИсторияСинхронизацииМенюSimphony.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПозицияМеню.Установить(Выборка.ПозицияМеню);
		НаборЗаписей.Отбор.ДатаВремя.Установить(Выборка.ДатаВремя);
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(Выборка.УникальныйИдентификатор);
		
		НаборЗаписей.Записать();
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Счетчик;
	
КонецФункции

&НаСервере
Функция СформироватьТабличныйДокументИстории()
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Создаем шаблон
	Макет = Новый ТабличныйДокумент;
	
	// Заголовок
	Область = Макет.Область();
	Область.Текст = "История синхронизации меню с Simphony";
	ТабДокумент.Вывести(Область);
	
	// Шапка таблицы
	Область = Макет.Область();
	Область.Текст = "Дата и время|Позиция меню|Операция|Статус|HTTP|Длительность, мс|Сообщение|Пользователь";
	ТабДокумент.Вывести(Область);
	
	// Данные
	Для Каждого Строка Из СписокИстории Цикл
		
		Область = Макет.Область();
		Область.Текст = СтрШаблон("%1|%2|%3|%4|%5|%6|%7|%8",
			Формат(Строка.ДатаВремя, "ДЛФ=DT"),
			Строка.ПозицияМеню,
			Строка.Операция,
			Строка.Статус,
			Строка.HTTPСтатус,
			Строка.ДлительностьМс,
			Строка.Сообщение,
			Строка.Пользователь);
			
		ТабДокумент.Вывести(Область);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

