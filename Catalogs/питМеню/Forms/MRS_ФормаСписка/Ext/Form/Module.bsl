// Модуль формы списка справочника

Перем СпособРасчетаРецептур;  			// Способ подбора основной рецептуры для блюда.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = ИнформацияОбОшибке;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДействиеПодбор(ТабличноеПоле)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	ДействиеПодбор(Список);	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Доступно = ВладелецУстановлен(ЭтаФорма);
	Если Доступно Тогда
		ПараметрыФормы = Новый Структура("Владелец", ОтборВладелец);
		ОткрытьФорму("Справочник.питМеню.Форма.ФормаАвтозаполнения",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ПоказатьПредупреждение(Неопределено, "Владелец не выбран!");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ПараметрыФормы = Новый Структура("ВидПрайсЛиста", ОтборВладелец);
	ОткрытьФорму("Справочник.питМеню.Форма.ФормаВыгрузки",ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованияГрупп(Команда)
	// Меняем наименование элементов меню на наименование номенклатуры.
	// Группы не трогаем.
	МассивОшибок = Новый Массив;
	ОбновитьНаименования(Истина,МассивОшибок);
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = "";
		Статус = Неопределено;
		Для Каждого Ошибка Из МассивОшибок Цикл
			Ошибка.Свойство("Текст",ТекстОшибки);
			Ошибка.Свойство("Статус",Статус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованияПозиций(Команда)
	// Меняем наименование элементов меню на наименование номенклатуры.
	// Группы не трогаем.
	МассивОшибок = Новый Массив;
	ОбновитьНаименования(Ложь,МассивОшибок);
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = "";
		Статус = Неопределено;
		Для Каждого Ошибка Из МассивОшибок Цикл
			Ошибка.Свойство("Текст",ТекстОшибки);
			Ошибка.Свойство("Статус",Статус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВыпускам(Команда)
	ПараметрыФормы = Новый Структура("Владелец", ОтборВладелец);
	ОткрытьФорму("Справочник.питМеню.Форма.ФормаЗаполненияПоПланамМеню",ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеГруппы(Команда)
	// Все группы меню (только в случае наличия группы верхнего уровня).
	ДляГрупп = Ложь; // Группы уже должны быть
	ОбновитьПоДеревуНоменклатуры(,ДляГрупп);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), "Удалить все позиции из меню?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		Возврат; 
	КонецЕсли;
	
	ОчиститьСервер();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСервер()
	ВладелецПрайсЛиста = ПолучитьТекущегоВладельца();
	Справочники.питМеню.ОчиститьПрайсЛист(ВладелецПрайсЛиста)
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтруктуруГрупп(Команда)
	ДляГрупп = Истина; // Группы нет
	ОбновитьПоДеревуНоменклатуры(, ДляГрупп);
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
// Рекурсивная процедура обновления по дереву номенклатуры.
//
// Параметры:
//	Родитель - Родительский узел дерева.
//  ДляГрупп - Флаг принадлежности к группе.
//
// Возвращаемое значение:
//	Нет.
//
Процедура ОбновитьПоДеревуНоменклатуры(Родитель = Неопределено, ДляГрупп = Ложь)
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.питМеню.ПустаяСсылка();
	КонецЕсли;
	РезультатЗапроса	= СформироватьДеревоНоменклатуры(Родитель);
	МенюРодитель		= Родитель;
	Уровень				= 0;
	ОбновитьПоВеткеНоменклатуры(РезультатЗапроса, МенюРодитель, Уровень, ДляГрупп); 
	
КонецПроцедуры

&НаСервере
// Возвращает номенклатуру, которая иерархически принадлежит указанному родителю.
//
// Параметры:
//	Родитель - Указанная номенклатура.
//
// Возвращаемое значение:
//	РезультатЗапроса - результат поисков.
//
Функция СформироватьДеревоНоменклатуры(Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Родитель,
	|	Номенклатура.ЭтоГруппа
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&Родитель)
	|	И НЕ Номенклатура.Ссылка = &Родитель
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Родитель", Родитель.Номенклатура);
	РезультатЗапроса	= Запрос.Выполнить();   
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервере
// Обновляет данные на основе переданной выборки.
//
// Параметры:
//	ВыборкаРодитель - Выборка, на основе которой обновляются данные.
//  МенюРодитель    - Родительское меню, из которого происходит обновление.
//  Уровень         - Уровень в выборке по иерархии.
//  ДляГрупп        - Флаг принадлежности к группе.
//
// Возвращаемое значение:
//	Нет.
//
Процедура ОбновитьПоВеткеНоменклатуры(ВыборкаРодитель, МенюРодитель, Уровень = 0, ДляГрупп = Ложь)
	ЗаполнятьЭлементыГруппы	= Ложь;
	НомРодитель				= МенюРодитель.Номенклатура;
	Если Не ДляГрупп Тогда
		Если ЗначениеЗаполнено(НомРодитель) Тогда
			Действие				= " заполняется из " + "<" + МенюРодитель.Родитель + ">";
			ЗаполнятьЭлементыГруппы = Истина;
		Иначе
			Действие				= " не заполняется. Не указано соответствие с номенклатурой.";
		КонецЕсли;
		Если ЗначениеЗаполнено(МенюРодитель) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Группа меню " + "<" + МенюРодитель.Наименование + ">" + Действие;
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		ЗаполнятьЭлементыГруппы		= Истина;
	КонецЕсли;
	
	
	Выборка	= ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		// Проверим, надо ли выводить эту строчку выборки.
		Если Выборка.Уровень() <> Уровень Тогда
			Продолжить;
		КонецЕсли;
		НомСсылка		= Выборка.Ссылка;
		ЗначениеОтбораВладелец = ПолучитьТекущегоВладельца();
		МенюСсылка		= Справочники.питМеню.НайтиПоРеквизиту("Номенклатура", НомСсылка, МенюРодитель, ЗначениеОтбораВладелец);
		ЭтоНовыйЭлемент = Ложь;
		Если ЗаполнятьЭлементыГруппы Тогда
			Если Не ЗначениеЗаполнено(МенюСсылка) Тогда
				// Нет такой группы меню
				ЭтоНовыйЭлемент	= Истина;
				Если ДляГрупп И НомСсылка.ЭтоГруппа Тогда
					ОбновитьГруппуМеню(НомСсылка, МенюСсылка, МенюРодитель);
					
				ИначеЕсли НЕ ДляГрупп И НЕ НомСсылка.ЭтоГруппа Тогда
					ОбновитьЭлементМеню(НомСсылка, МенюСсылка, МенюРодитель);
				КонецЕсли;
			Иначе
				Если НЕ ДляГрупп И НЕ НомСсылка.ЭтоГруппа Тогда
					ОбновитьЭлементМеню(НомСсылка, МенюСсылка, МенюРодитель);
				ИначеЕсли НомСсылка.ЭтоГруппа Тогда
					ОбновитьГруппуМеню(НомСсылка, МенюСсылка, МенюРодитель);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЭтоГруппа Тогда
			ОбновитьПоВеткеНоменклатуры(Выборка, МенюСсылка, 1+Выборка.Уровень(), ДляГрупп);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
// Добавление групп меню на основе заданной номенклатуры.
//
// Параметры:
//  НомСсылка       - Номенклатура, на основе которой происходит обновление группы меню.
//  МенюСсылка      - Элемент меню (прайс-листа).
//  МенюРодитель    - Родительский элемент меню.
//  НомНаименование - Заданное наименование элемента меню.
//
// Возвращаемое значение:
//	Нет.
//
Процедура ОбновитьГруппуМеню(НомСсылка, МенюСсылка, МенюРодитель, НомНаименование = "")
	
	Действие		= "";
	// Добавляем только позиции
	Статус			= СтатусСообщения.Информация;
	НазначенРодитель= Ложь;
	Если ЗначениеЗаполнено(МенюСсылка) Тогда
		Если МенюСсылка.НомерВГруппе = 0 Тогда
			МенюОбъект	= МенюСсылка.ПолучитьОбъект();
			Попытка
				МенюОбъект.Записать();
				МенюСсылка	= МенюОбъект.Ссылка;
				Действие	= "Присвоен номер группе меню ";
			Исключение
				Действие	= "Ошибка записи при присвоении номера группе меню: " + ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()).Описание;
				Статус		= СтатусСообщения.Внимание;
			КонецПопытки;
		КонецЕсли;
	Иначе
		НазначенРодитель	= Истина;
		МенюОбъект			= Справочники.питМеню.СоздатьГруппу();
		МенюОбъект.Родитель = МенюРодитель;
		ЗначениеОтбораВладелец = ПолучитьТекущегоВладельца();
		МенюОбъект.Владелец = ЗначениеОтбораВладелец;
		Если ПустаяСтрока(НомНаименование) Тогда
			МенюОбъект.Наименование = НомСсылка.Наименование;
		Иначе
			МенюОбъект.Наименование = НомНаименование;
		КонецЕсли; 
		
		МенюОбъект.Номенклатура	= НомСсылка;
		МенюОбъект.УстановитьНовыйКод();
		Попытка
			МенюОбъект.Записать();
			МенюСсылка	= МенюОбъект.Ссылка;
			Действие	= "Добавлена группа меню ";
		Исключение
			Действие	= "Ошибка записи при добавлении группы меню: " + ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()).Описание;
			Статус		= СтатусСообщения.Внимание;
		КонецПопытки;
	КонецЕсли;
	Если Действие <> "" Тогда
		Представление	= "<" + МенюСсылка.Наименование + ">";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Действие + Представление;
		Сообщение.Сообщить();
		Если Статус = СтатусСообщения.Информация Тогда
			Если ЗначениеЗаполнено(МенюРодитель) И НазначенРодитель Тогда
				Представление	= "Группе меню " + Представление;
				Действие		= " назначен родитель " + "<" + МенюРодитель.Наименование + ">";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Представление + Действие;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура обновления заданного элемента меню.
//
// Параметры:
//  НомСсылка    - Номенклатура, на основе которой происходит обновление.
//  МенюСсылка   - Элемент меню (прайс-листа).
//  МенюРодитель - Родительский элемент меню.
//
// Возвращаемое значение:
//	Нет.
//
Процедура ОбновитьЭлементМеню(НомСсылка, МенюСсылка, МенюРодитель)
	
	Статус	= СтатусСообщения.Информация;
	ТекстОшибки = "";
	// Добавляем только позиции
	Если  ЗначениеЗаполнено(МенюСсылка) Тогда
		Если МенюСсылка.Номенклатура = НомСсылка Тогда
			Действие = " уже есть в группе меню ";
			Если МенюСсылка.НомерВГруппе = 0 Тогда
				МенюОбъект = МенюСсылка.ПолучитьОбъект();
				Попытка
					МенюОбъект.Записать();
				Исключение
					Действие	= " ошибка записи: " + ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()).Описание;
					Статус		= СтатусСообщения.Внимание;
				КонецПопытки;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(НомСсылка) Тогда
				МенюОбъект				= МенюСсылка.ПолучитьОбъект();
				МенюОбъект.Номенклатура = НомСсылка;
				Попытка
					МенюОбъект.Записать();
					Действие			= " добавлена в группу меню ";
				Исключение
					Действие			= " ошибка записи: " + ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()).Описание;
					Статус				= СтатусСообщения.Внимание;
				КонецПопытки;
			Иначе
				Действие				= " уже есть в группе меню ";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НЕ Справочники.питМеню.ПроверитьДопустимыйВидНоменклатуры(НомСсылка, ТекстОшибки) Тогда
		Действие	= " ошибка добавления в меню. " + ТекстОшибки;
		Статус		= СтатусСообщения.Внимание;
		
	Иначе
		МенюОбъект						= Справочники.питМеню.СоздатьЭлемент();
		МенюОбъект.ЕдиницаИзмерения		= НомСсылка.ЕдиницаИзмерения;
		МенюОбъект.Родитель				= МенюРодитель;
		МенюОбъект.Владелец				= ПолучитьТекущегоВладельца();
		МенюОбъект.Наименование			= НомСсылка.Наименование;
		МенюОбъект.Номенклатура			= НомСсылка;
		
		Если НомСсылка.питВидНоменклатуры = Перечисления.питВидыНоменклатуры.Блюдо Тогда
			Если Не ЗначениеЗаполнено(СпособРасчетаРецептур) Тогда
				//СпособРасчетаРецептур	= Константы.питСпособРасчетаРецептур.Получить();
				СпособРасчетаРецептур	= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("СпособРасчетаРецептур");
			КонецЕсли;
			МенюОбъект.Рецептура		= питПроизводство.ВернутьОсновнуюРецептуру(НомСсылка,,Перечисления.питХозяйственныеОперации.РецептураПриготовление,ТекущаяДата(),СпособРасчетаРецептур);
			
		Иначе
			МенюОбъект.Рецептура	= Документы.питРецептура.ПустаяСсылка();
		КонецЕсли;
		
		МенюОбъект.УстановитьНовыйКод();
		Попытка
			МенюОбъект.Записать();
			МенюСсылка	= МенюОбъект.Ссылка;
			Действие	= " добавлена в группу меню ";
		Исключение
			Действие	= " ошибка записи: " + ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()).Описание;
			Статус		= СтатусСообщения.Внимание;
		КонецПопытки;
	КонецЕсли;
	
	Представление		= "Номенклатура ";
	Если Статус			= СтатусСообщения.Информация Тогда
		Действие		= Действие + "<" + МенюСсылка.Родитель + ">";
	КонецЕсли;		
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Представление + "<" + НомСсылка.Наименование + ">" + Действие;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	питИзменениеОтраслевыхФормСервер.ПриСозданииНаСервереВНачале(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		ОтборВладелец = Параметры.Отбор.Владелец;
		Элементы.СтраницыОтборВидПрайсЛиста.ТекущаяСтраница = Элементы.ГруппаОтображениеВидПрайсЛиста;
		Параметры.Отбор.Удалить("Владелец");
	Иначе
		Если ОтборВладелец.Пустая() Тогда
			ОтборВладелец = Справочники.питВидыМеню.ОсновнойВидМеню;
		КонецЕсли;
		Элементы.СтраницыОтборВидПрайсЛиста.ТекущаяСтраница = Элементы.ГруппаОтборВидПрайсЛиста;
	КонецЕсли;
	ОтборВладелецИспользование = ЗначениеЗаполнено(ОтборВладелец);
	питОбщегоНазначенияКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Владелец");
	
	Если ТолькоПросмотр Тогда
		Элементы.ФормаПодбор.Доступность    = Ложь;
		Элементы.ФормаУдалить.Доступность   = Ложь;
		Элементы.ФормаОчистить.Доступность	= Ложь;
		Элементы.ФормаЗаполнить.Доступность = Ложь;
		Элементы.ФормаВыгрузить.Доступность = Ложь;
		Элементы.ФормаОбновитьВсеГруппы.Доступность            = Ложь;
		Элементы.ФормаЗаполнитьНаименованияПозиций.Доступность = Ложь;
		Элементы.ФормаЗаполнитьНаименованияГрупп.Доступность   = Ложь;
		Элементы.ФормаСкопироватьСтруктуруГрупп.Доступность    = Ложь;
		Элементы.ФормаЗаполнитьПоВыпускам.Доступность          = Ложь;
	КонецЕсли;
	
	УправлениеДиалогом(ЭтаФорма);
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	//СпособРасчетаРецептур							= Константы.питСпособРасчетаРецептур.Получить();	
	СпособРасчетаРецептур	= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("СпособРасчетаРецептур");
	СпособРасчетаРецептурВВыпускеПродукции			= Константы.питСпособРасчетаРецептур.Получить();
	// Определим видимость колонки ссылочной рецептуры.
	Если СпособРасчетаРецептурВВыпускеПродукции=Перечисления.питСпособРасчетаРецептур.ПоАктуальнойРецептуре Тогда
		Элементы.Список.ПодчиненныеЭлементы.Рецептура.Видимость			= Ложь;
	Иначе
		Элементы.Список.ПодчиненныеЭлементы.Рецептура.Видимость			= Истина;
	КонецЕсли;
	Элементы.Список.ПодчиненныеЭлементы.Владелец.Видимость	= Ложь;
	Элементы.Список.ПодчиненныеЭлементы.Код.Видимость		= Ложь;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.питМеню);
	Элементы.КоманднаяПанельФормы.Видимость				= МожноРедактировать;
	Элементы.СписокКонтекстноеМенюУдалитьМеню.Видимость	= МожноРедактировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Подключим обработку изменения отборов форм списков справочников.
	//ВидПрайсЛиста = ПолучитьТекущегоВладельца();
	// Восстановим видимость дерева групп (для иерархических справочников).
	КнопкаДерева		= ЭтаФорма.Элементы.ФормаОтображатьДерево; 
	//Показать			= ВосстановитьЗначение(СтрЗаменить(ЭтаФорма.Список,".","_")+"_СкрытьДеревоГрупп");
	Показать			= ?(Показать=Неопределено,Ложь,Показать);
	КнопкаДерева.Пометка= Показать;
	ОтображатьДерево(КнопкаДерева);
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью и доступностью элементов формы.
Процедура УправлениеДиалогом(Форма)
	Элементы = Форма.Элементы;
	Доступно = ВладелецУстановлен(Форма);
	Элементы.ФормаПодбор.Доступность	= Доступно;
	Элементы.ФормаОчистить.Доступность	= Доступно; 
	Элементы.ФормаЗаполнить.Доступность	= Доступно;
	Элементы.ФормаВыгрузить.Доступность	= Доступно;
	Элементы.ФормаОбновитьВсеГруппы.Доступность			= Доступно;
	Элементы.ФормаСкопироватьСтруктуруГрупп.Доступность = Доступно;
	Элементы.ФормаЗаполнитьПоВыпускам.Доступность		= Доступно;
	Элементы.ФормаЗаполнитьНаименованияПозиций.Доступность	= Доступно;
	Элементы.ФормаЗаполнитьНаименованияГрупп.Доступность	= Доступно;
КонецПроцедуры // УправлениеДиалогом()

&НаКлиенте
Процедура ОтображатьДерево(Команда)
	Элементы.ФормаОтображатьДерево.Пометка		= Не Элементы.ФормаОтображатьДерево.Пометка; // Инвертируем флаг
	Элементы.Дерево.Видимость = Ложь;
	Если НЕ Элементы.Дерево.Видимость Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Родитель")
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаВыбора" Тогда
		
		ТекстОшибки = "";
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ТекстОшибки);
		
		Если ТекстОшибки <> "" Тогда
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора)=Тип("УправляемаяФорма")
		И ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		ЗаполнитьМенюПоВыпускамПродукции(ВыбранноеЗначение);
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ТекстОшибки)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ОбработкаПодбора(Список, СписокТоваров, ТекстОшибки);
	
КонецПроцедуры


&НаСервере
// Производит заполнение прайс-листа переданными из формы подбора данными.
//
// Параметры:
//  ТабличноеПоле     - табличное поле, в которое надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличноеПоле, ЗначениеВыбора, ТекстОшибки = "")
	
	Если НЕ ТипЗнч(ЗначениеВыбора) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем выбранную позицию в таблице прайс-листа.
	Запрос			= Новый ПостроительЗапроса();
	Запрос.Текст	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Меню.Ссылка
	|ИЗ
	|	Справочник.питМеню КАК Меню
	|{ГДЕ
	|	Меню.Ссылка.*,
	|	Меню.ПометкаУдаления,
	|	Меню.Владелец.*,
	|	Меню.ЭтоГруппа,
	|	Меню.Код,
	|	Меню.Наименование,
	|	Меню.Номенклатура.*,
	|	Меню.Рецептура.*,
	|	Меню.ЕдиницаИзмерения.*,
	|	Меню.НомерВГруппе,
	|	Меню.Выключен,
	|	Меню.ИмяКартинки,
	|	Меню.ЦветФонаКнопок}";
	
	
	Для Каждого Номенклатура Из ЗначениеВыбора Цикл
		ТекстОшибки = "";
		Если НЕ Справочники.питМеню.ПроверитьДопустимыйВидНоменклатуры(Номенклатура, ТекстОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
		
		// Очистим отбор
		ОтборКоличество = Запрос.Отбор.Количество();
		Для Ном = 1 По ОтборКоличество Цикл
			Запрос.Отбор.Удалить(ОтборКоличество - Ном);
		КонецЦикла;
		
		ЕдиницаИзмеренияСписок = Новый СписокЗначений;
		ЕдиницаИзмеренияСписок.Добавить(ЕдиницаИзмерения);
		ЕдиницаИзмеренияСписок.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		
		НовыйЭлемент = Запрос.Отбор.Добавить("Номенклатура");
		НовыйЭлемент.Значение		= Номенклатура;
		НовыйЭлемент.ВидСравнения	= ВидСравнения.Равно;
		НовыйЭлемент.Использование	= Истина;
		
		НовыйЭлемент = Запрос.Отбор.Добавить("ЕдиницаИзмерения");
		НовыйЭлемент.ВидСравнения	= ВидСравнения.ВСписке;
		НовыйЭлемент.Значение		= ЕдиницаИзмеренияСписок;
		НовыйЭлемент.Использование	= Истина;
		
		НовыйЭлемент = Запрос.Отбор.Добавить("ЭтоГруппа");
		НовыйЭлемент.Значение		= Номенклатура.ЭтоГруппа;
		НовыйЭлемент.ВидСравнения	= ВидСравнения.Равно;
		НовыйЭлемент.Использование	= Истина;
		
		НовыйЭлемент = Запрос.Отбор.Добавить("Владелец");
		НовыйЭлемент.Значение		= ПолучитьТекущегоВладельца();
		НовыйЭлемент.ВидСравнения	= ВидСравнения.Равно;
		НовыйЭлемент.Использование	= Истина;
		
		//ВидПрайсЛиста	= НовыйЭлемент.Значение;
		
		Запрос.Выполнить();
		Выборка	= Запрос.Результат.Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Если Номенклатура.ЭтоГруппа Тогда
				ЭлементМеню					= Справочники.питМеню.СоздатьГруппу();	
			Иначе
				ЭлементМеню					= Справочники.питМеню.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					ЭлементМеню.ЕдиницаИзмерения = ЕдиницаИзмерения;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СпособРасчетаРецептур) Тогда
					//СпособРасчетаРецептур	= Константы.питСпособРасчетаРецептур.Получить();
					СпособРасчетаРецептур	= питОбщегоНазначенияСервер.ПолучитьЗначениеПоУмолчанию("СпособРасчетаРецептур");
				КонецЕсли;
				ЭлементМеню.Рецептура		= питПроизводство.ВернутьОсновнуюРецептуру(Номенклатура,,Перечисления.питХозяйственныеОперации.РецептураПриготовление,ТекущаяДата(),СпособРасчетаРецептур);
			КонецЕсли;
			
			ЭлементМеню.Владелец    		= ?(ЗначениеЗаполнено(ОтборВладелец), ОтборВладелец, Справочники.питВидыМеню.ОсновнойВидМеню);
			ЭлементМеню.Наименование		= Номенклатура.Наименование;
			ЭлементМеню.Номенклатура		= Номенклатура;
			Если ЗначениеЗаполнено(Элементы.Список.ТекущийРодитель) Тогда
				ЭлементМеню.Родитель		= Элементы.Список.ТекущийРодитель;
			КонецЕсли;
			ЭлементМеню.УстановитьНовыйКод();
			
			Попытка
				ЭлементМеню.Записать();
				ЭлементМеню					= ЭлементМеню.Ссылка;
			Исключение
				ЭлементМеню = Неопределено;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запись меню """+ЭлементМеню+""": "+ОписаниеОшибки());
			КонецПопытки;
		Иначе
			Выборка.Следующий();
			ЭлементМеню	= Выборка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементМеню <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока  = ЭлементМеню;
		Элементы.Список.ТекущийЭлемент = Элементы.Список.ПодчиненныеЭлементы.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()

&НаСервере
Процедура ЗаполнитьМенюПоВыпускамПродукции(МассивДокументов)
	
	// Очистим имеющийся состав меню.
	Владелец = ПолучитьТекущегоВладельца();
	РезультатОчистки = Справочники.питМеню.ОчиститьПрайсЛист(Владелец);
	Если НЕ РезультатОчистки Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполним новым составом (категория номенклатуры - это группа меню).
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукцииТовары.Номенклатура КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВыпускПродукцииТовары.Номенклатура.Родитель) КАК Наименование,
	|	ВыпускПродукцииТовары.Номенклатура
	|ИЗ
	|	Документ.питВыпускБлюд.Товары КАК ВыпускПродукцииТовары
	|ГДЕ
	|	ВыпускПродукцииТовары.Ссылка В(&МассивСсылок)
	|ИТОГИ ПО
	|	ВыпускПродукцииТовары.Номенклатура.Родитель";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	ВыборкаКатегории = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКатегории.Следующий() Цикл
		
		НомСсылка = Справочники.Номенклатура.НайтиПоНаименованию(ВыборкаКатегории.Наименование, Истина);
		МенюСсылка = Справочники.питМеню.ПустаяСсылка();
		МенюРодитель = Справочники.питМеню.ПустаяСсылка();
		
		Если НЕ НомСсылка.Пустая() ИЛИ НЕ ПустаяСтрока(ВыборкаКатегории.Наименование) Тогда
			ОбновитьГруппуМеню(НомСсылка, МенюСсылка, МенюРодитель, ВыборкаКатегории.Наименование);
		КонецЕсли; 
		
		МенюРодитель = МенюСсылка;
		
		Выборка = ВыборкаКатегории.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НомСсылка = Выборка.Ссылка;
			МенюСсылка = Справочники.питМеню.ПустаяСсылка();
			
			ОбновитьЭлементМеню(НомСсылка, МенюСсылка, МенюРодитель);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Попытка
		// Идентификатор может быть отличен от "Список",
		// позиционируемся на введенный объект через попытку.
		ЭтаФорма.Элементы.Список.ТекущаяСтрока = НовыйОбъект.Ссылка;
	Исключение КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Элементы.Список.ТекущаяСтрока Тогда
		//РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущегоВладельца()
	ВладелецОтбор = питОбщегоНазначенияКлиентСервер.ЭлементОтбораСпискаПоИмени(Список, "Владелец");
	Если ВладелецОтбор <> Неопределено Тогда
		ВладелецОтбор = ВладелецОтбор.ПравоеЗначение;
	Иначе
		ВладелецОтбор = Справочники.питВидыМеню.ПустаяСсылка()
	КонецЕсли;
	Возврат ВладелецОтбор
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВладелецУстановлен(Форма)
	ВладелецОтбор = питОбщегоНазначенияКлиентСервер.ЭлементОтбораСпискаПоИмени(Форма.Список, "Владелец");
	Если ВладелецОтбор <> Неопределено Тогда
		ЗначениеОтбораВладелец = ?(ВладелецОтбор = Неопределено, Форма.ВидПрайсЛистаПустаяСсылка, ВладелецОтбор.ПравоеЗначение);
		ИспользованиеОтбораВладелец = ?(ВладелецОтбор = Неопределено, Ложь, ВладелецОтбор.Использование);
		
		Доступно = ЗначениеЗаполнено(ЗначениеОтбораВладелец) И ИспользованиеОтбораВладелец;
	Иначе
		Доступно = Ложь;
	КонецЕсли;
	
	Возврат Доступно;
КонецФункции

&НаСервере
Процедура ОбновитьНаименования(ДляГрупп = Ложь, МассивОшибок = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Меню.Ссылка КАК МенюСсылка,
	|	Меню.Номенклатура.Ссылка КАК НомСсылка,
	|	Меню.Родитель,
	|	Меню.ЭтоГруппа,
	|	Меню.Наименование КАК МенюНаименование,
	|	Меню.Номенклатура.Наименование КАК НомНаименование,
	|	Меню.НомерВГруппе
	|ИЗ
	|	Справочник.питМеню КАК Меню
	|ГДЕ
	|	"+?(ДляГрупп,"","Не ")+"Меню.ЭтоГруппа
	|	И НЕ Меню.Наименование = Меню.Номенклатура.Наименование
	|	И Меню.Владелец = &Владелец
	|УПОРЯДОЧИТЬ ПО
	|	Меню.НомерВГруппе";
	Запрос.УстановитьПараметр("ДляГрупп", ДляГрупп);
	Запрос.УстановитьПараметр("Владелец", ПолучитьТекущегоВладельца());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Статус					= СтатусСообщения.Информация;
		МенюСсылка				= Выборка.МенюСсылка;
		МенюОбъект				= МенюСсылка.ПолучитьОбъект();
		МенюОбъект.Наименование	= Выборка.НомНаименование;
		
		Попытка
			МенюОбъект.Записать();
			Действие	= " изменилось на ";
		Исключение
			Действие	= " ошибка записи: " + ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке()).Описание;
			Статус		= СтатусСообщения.Внимание;
		КонецПопытки;
		Если Статус = СтатусСообщения.Информация Тогда
			Действие	= Действие + "<" + МенюСсылка.Наименование + ">";
		КонецЕсли;
		СтруктураОшибок = Новый Структура;
		СтруктураОшибок.Вставить("Текст","Наименование " + "<" + Выборка.МенюНаименование + ">" + Действие);
		СтруктураОшибок.Вставить("Статус", Статус);
		МассивОшибок.Добавить(СтруктураОшибок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьНомер(Команда)
	ТекСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекСтрока = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	Ошибки = "";
	УменьшитьНомерНаСервере(ТекСтрока, Ошибки);
	Если Ошибки <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запись меню """+ТекСтрока+""": "+Ошибки);
	КонецЕсли;
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура УменьшитьНомерНаСервере(ПрайсЛист, Ошибки = "")
	ТекНомерВГруппе	= ПрайсЛист.НомерВГруппе;
	Если ТекНомерВГруппе <=1 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Меню.Ссылка,
	|	Меню.НомерВГруппе КАК НомерВГруппе
	|ИЗ
	|	Справочник.питМеню КАК Меню
	|ГДЕ
	|	Меню.Владелец = &ВидМеню
	|	И (Меню.НомерВГруппе < &НомерВГруппе ИЛИ (Меню.НомерВГруппе = &НомерВГруппе И Меню.Ссылка < &Ссылка))
	|	И Меню.Родитель =  &ТекРодитель
	|УПОРЯДОЧИТЬ ПО
	|	НомерВГруппе УБЫВ";
	Запрос.УстановитьПараметр("ВидМеню",ПолучитьТекущегоВладельца());
	Запрос.УстановитьПараметр("НомерВГруппе",ТекНомерВГруппе);
	Запрос.УстановитьПараметр("ТекРодитель",ПрайсЛист.Родитель);
	Запрос.УстановитьПараметр("Ссылка",ПрайсЛист);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Запомним первый больший приоритет
		ПервыйНомерВГруппе = Выборка.НомерВГруппе;
		Если ПервыйНомерВГруппе = ТекНомерВГруппе Тогда
			ПервыйНомерВГруппе = ПервыйНомерВГруппе - 1;
		Иначе
			ОбъектМеню = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектМеню.НомерВГруппе = ПервыйНомерВГруппе + 1;
			ОбъектМеню.ДополнительныеСвойства.Вставить("СменаНомера",Истина);
			Попытка
				ОбъектМеню.Записать();
			Исключение
				Ошибки = Ошибки + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ОбъектМеню);
			КонецПопытки;
		КонецЕсли;
		
		ОбъектМеню = ПрайсЛист.ПолучитьОбъект();
		ОбъектМеню.НомерВГруппе = ПервыйНомерВГруппе;
		ОбъектМеню.ДополнительныеСвойства.Вставить("СменаНомера",Истина);
		Попытка
			ОбъектМеню.Записать();
		Исключение
			Ошибки = Ошибки + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ОбъектМеню);
		КонецПопытки;
		
	КонецЕсли;	
	
	// Возможно дублирование номеров, если есть повторение, то сдвинем их в другую сторону.
	Пока Выборка.Следующий() И (ПервыйНомерВГруппе <= Выборка.НомерВГруппе) И (Выборка.НомерВГруппе > 0) Цикл
		
		Если ПервыйНомерВГруппе > 1 Тогда
			ПервыйНомерВГруппе = ПервыйНомерВГруппе - 1 ;
		КонецЕсли;
		
		ОбъектМеню = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектМеню.НомерВГруппе = ПервыйНомерВГруппе;
		ОбъектМеню.ДополнительныеСвойства.Вставить("СменаНомера",Истина);
		Попытка
			ОбъектМеню.Записать();
		Исключение
			Ошибки = Ошибки + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), ОбъектМеню);
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьНомер(Команда)
	ТекСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ошибки = "";
	УвеличитьНомерНаСервере(ТекСтрока, Ошибки);
	Если Ошибки <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Запись меню """+ТекСтрока+""": "+Ошибки);
	КонецЕсли;
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура УвеличитьНомерНаСервере(ПрайсЛист,Ошибки = "")
	ТекНомерВГруппе	= ПрайсЛист.НомерВГруппе;	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Меню.Ссылка,
	|	Меню.НомерВГруппе КАК НомерВГруппе
	|ИЗ
	|	Справочник.питМеню КАК Меню
	|ГДЕ
	|	Меню.Владелец = &ВидМеню
	|	И (Меню.НомерВГруппе > &НомерВГруппе ИЛИ (Меню.НомерВГруппе = &НомерВГруппе И Меню.Ссылка > &Ссылка))
	|   И Меню.Родитель =  &ТекРодитель
	|УПОРЯДОЧИТЬ ПО
	|	НомерВГруппе";
	Запрос.УстановитьПараметр("ВидМеню",ПолучитьТекущегоВладельца());
	Запрос.УстановитьПараметр("НомерВГруппе",ТекНомерВГруппе);
	Запрос.УстановитьПараметр("ТекРодитель",ПрайсЛист.Родитель);
	Запрос.УстановитьПараметр("Ссылка",ПрайсЛист);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		// Запомним первый минимальный приоритет
		ПервыйНомерВГруппе = Выборка.НомерВГруппе;
		Если ПервыйНомерВГруппе = ТекНомерВГруппе Тогда
			ПервыйНомерВГруппе = ПервыйНомерВГруппе + 1;
		Иначе
			ОбъектМеню = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектМеню.НомерВГруппе = ПервыйНомерВГруппе - 1;
			ОбъектМеню.ДополнительныеСвойства.Вставить("СменаНомера",Истина);
			Попытка
				ОбъектМеню.Записать();
			Исключение
				Ошибки = Ошибки + ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
		ОбъектМеню = ПрайсЛист.ПолучитьОбъект();
		ОбъектМеню.НомерВГруппе = ПервыйНомерВГруппе;
		ОбъектМеню.ДополнительныеСвойства.Вставить("СменаНомера",Истина);
		Попытка
			ОбъектМеню.Записать();
		Исключение
			Ошибки = Ошибки + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	// Возможно дублирование номеров, если есть повторение, то сдвинем их в другую сторону.
	Пока Выборка.Следующий() И (ПервыйНомерВГруппе >= Выборка.НомерВГруппе) Цикл
		
		ПервыйНомерВГруппе = ПервыйНомерВГруппе + 1 ;
		
		ОбъектМеню = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектМеню.НомерВГруппе = ПервыйНомерВГруппе;
		ОбъектМеню.ДополнительныеСвойства.Вставить("СменаНомера",Истина);
		Попытка
			ОбъектМеню.Записать();
		Исключение
			Ошибки = Ошибки + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПрайсЛистаИспользованиеПриИзменении(Элемент)
	
	питОбщегоНазначенияКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Владелец");
	УправлениеДиалогом(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПрайсЛистаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОтборВладелец) Тогда
		ОтборВладелецИспользование = Истина;
	КонецЕсли;
	
	питОбщегоНазначенияКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Владелец");
	
	УправлениеДиалогом(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМеню(Команда)
	текСтрока = Элементы.Список.ТекущаяСтрока;
	Если ЗначениеЗаполнено(текСтрока) Тогда
		УдалитьМенюСервер(текСтрока);
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьМенюСервер(Меню)
	МенюОбъект = Меню.ПолучитьОбъект();
	МенюОбъект.ОбменДанными.Загрузка = Истина; //?? временно, исправление ошибки удаления элемента меню с правами Бухгалтера.
	// Из-за вот этого(↑↑↑↑↑↑↑)флага, при удалении объекта,
	// если это группа, то платформа не производит удаление дочерних,
	// поэтому остаются битые ссылки.
	// Ищем все дочерние элементы с учетом иерархии, для того, чтобы и их тоже удалить.
	МассивДочерних = Новый Массив;
	Если МенюОбъект.ОбменДанными.Загрузка И МенюОбъект.ЭтоГруппа Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	питМеню.Ссылка
		|ИЗ
		|	Справочник.питМеню КАК питМеню
		|ГДЕ
		|	питМеню.Родитель В ИЕРАРХИИ(&Родитель)";
		Запрос.УстановитьПараметр("Родитель", Меню);
		МассивДочерних = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Попытка
		Если МенюОбъект.ОбменДанными.Загрузка Тогда
			// Удаление дочерних вручную
			Для каждого ТекДочернийЭлемент Из МассивДочерних Цикл
				ТекДочернийОбъект = ТекДочернийЭлемент.ПолучитьОбъект();
				ТекДочернийОбъект.ОбменДанными.Загрузка = Истина; //?? временно, исправление ошибки удаления элемента меню с правами Бухгалтера.
				ТекДочернийОбъект.Удалить();
			КонецЦикла;
		КонецЕсли;
		// Удаление непосредственно элемента меню
		МенюОбъект.Удалить();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры
