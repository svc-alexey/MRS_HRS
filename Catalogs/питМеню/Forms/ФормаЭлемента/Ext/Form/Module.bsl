////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&После("ПриСозданииНаСервере")
Процедура MRS_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Добавляем группу и элементы синхронизации Simphony
	ДобавитьГруппуСинхронизацииSimphony();
	
	// Обновляем картинку статуса
	ОбновитьОтображениеСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обновляем отображение статуса после записи
	ОбновитьОтображениеСтатуса();
	
КонецПроцедуры

&После("ПриОткрытии")
&НаКлиенте
Процедура MRS_ПриОткрытии(Отказ)
	
	// Обновляем видимость элементов
	ОбновитьВидимостьЭлементовСинхронизации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьИсториюСинхронизации(Команда)
	
	// Открываем форму истории синхронизации для текущей позиции
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(, "Сначала необходимо записать позицию меню!");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПозицияМеню", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.питМеню.Форма.MRS_ФормаМониторинга", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВSimphonyСейчас(Команда)
	
	// Принудительная выгрузка текущей позиции в Simphony
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(, "Сначала необходимо записать позицию меню!");
		Возврат;
		
	КонецЕсли;
	
	// Запускаем выгрузку
	Результат = ВыгрузитьПозициюВSimphonyНаСервере();
	
	Если Результат.Успех Тогда
		
		ПоказатьОповещениеПользователя(
			"Выгрузка выполнена",
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			"Позиция успешно выгружена в Simphony");
			
		ОбновитьОтображениеСтатуса();
		
	Иначе
		
		ПоказатьПредупреждение(, "Ошибка выгрузки: " + Результат.Ошибка);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ДобавитьГруппуСинхронизацииSimphony()
	
	// Ищем группу "ГруппаДополнительныеРеквизиты" для вставки перед ней
	ГруппаВставки = Элементы.Найти("ГруппаДополнительныеРеквизиты");
	
	Если ГруппаВставки = Неопределено Тогда
		// Если группы нет, добавляем в конец формы
		ГруппаВставки = Неопределено;
	КонецЕсли;
	
	// Создаем основную группу синхронизации
	Попытка
		
		ГруппаСинхронизации = Элементы.Добавить("ГруппаСинхронизацияSimphony", Тип("ГруппаФормы"), Элементы);
		ГруппаСинхронизации.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСинхронизации.Заголовок = "Синхронизация с Simphony";
		ГруппаСинхронизации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаСинхронизации.ОтображатьЗаголовок = Истина;
		
		Если ГруппаВставки <> Неопределено Тогда
			Элементы.Переместить(ГруппаСинхронизации, Элементы, ГруппаВставки);
		КонецЕсли;
		
		// Добавляем поле для кода Simphony
		ПолеКода = Элементы.Добавить("MRS_КодSimphony", Тип("ПолеФормы"), ГруппаСинхронизации);
		ПолеКода.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКода.ПутьКДанным = "Объект.MRS_КодSimphony";
		ПолеКода.Заголовок = "Код Simphony (stringNumberId)";
		ПолеКода.ТолькоПросмотр = Истина;
		ПолеКода.ЦветФона = WebЦвета.СветлоСерый;
		
		// Добавляем поле статуса
		ПолеСтатуса = Элементы.Добавить("MRS_СтатусСинхронизацииSimphony", Тип("ПолеФормы"), ГруппаСинхронизации);
		ПолеСтатуса.Вид = ВидПоляФормы.ПолеВвода;
		ПолеСтатуса.ПутьКДанным = "Объект.MRS_СтатусСинхронизацииSimphony";
		ПолеСтатуса.Заголовок = "Статус";
		ПолеСтатуса.ТолькоПросмотр = Истина;
		
		// Добавляем гиперссылку "История синхронизации"
		ГиперссылкаИстория = Элементы.Добавить("ГиперссылкаИсторияСинхронизации", Тип("ДекорацияФормы"), ГруппаСинхронизации);
		ГиперссылкаИстория.Вид = ВидДекорацииФормы.Надпись;
		ГиперссылкаИстория.Заголовок = "История синхронизации";
		ГиперссылкаИстория.Гиперссылка = Истина;
		ГиперссылкаИстория.УстановитьДействие("Нажатие", "ОткрытьИсториюСинхронизации");
		
		// Добавляем кнопку выгрузки
		КнопкаВыгрузки = Элементы.Добавить("КнопкаВыгрузитьВSimphony", Тип("КнопкаФормы"), ГруппаСинхронизации);
		КнопкаВыгрузки.ВидКнопки = ВидКнопкиФормы.ОбычнаяКнопка;
		КнопкаВыгрузки.Заголовок = "Выгрузить в Simphony сейчас";
		КнопкаВыгрузки.УстановитьДействие("Нажатие", "ВыгрузитьВSimphonyСейчас");
		
	Исключение
		
		// Группа уже существует или ошибка добавления - игнорируем
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСтатуса()
	
	// Обновление отображения статуса (через условное оформление формы)
	// Ничего дополнительно делать не нужно
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьЭлементовСинхронизации()
	
	// Показываем группу синхронизации только для элементов (не групп)
	ГруппаСинхронизации = Элементы.Найти("ГруппаСинхронизацияSimphony");
	
	Если ГруппаСинхронизации <> Неопределено Тогда
		ГруппаСинхронизации.Видимость = НЕ Объект.ЭтоГруппа;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПозициюВSimphonyНаСервере()
	
	Результат = Новый Структура("Успех, Ошибка", Ложь, "");
	
	Попытка
		
		// Вызываем метод выгрузки из общего модуля
		МассивПозиций = Новый Массив;
		МассивПозиций.Добавить(Объект.Ссылка);
		
		РезультатВыгрузки = MRS_ИнтеграцияSimphonyСервер.ВыгрузитьПозицииМеню(МассивПозиций);
		
		Если РезультатВыгрузки.Успех Тогда
			
			// Обновляем данные объекта
			Прочитать();
			Результат.Успех = Истина;
			
		Иначе
			
			Результат.Ошибка = РезультатВыгрузки.Ошибка;
			
		КонецЕсли;
		
	Исключение
		
		Результат.Ошибка = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
