////////////////////////////////////////////////////////////////////////////////
// ФОРМА УПРАВЛЕНИЯ ОЧЕРЕДЬЮ ВЫГРУЗКИ МЕНЮ В SIMPHONY
// 
// Описание:
//   Форма для управления очередью выгрузки позиций меню в Oracle Simphony POS
//   Позволяет просматривать, редактировать и вручную обрабатывать очередь
//

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация отборов
	ПоказыватьВОчереди = Истина;
	ПоказыватьСОшибками = Истина;
	ПоказыватьТребуетВнимания = Истина;
	КассовыйУзел = Справочники.питУдаленныеКассы.ПустаяСсылка();
	
	// Обновляем статистику и список
	ОбновитьСтатистику();
	ОбновитьСписокОчереди();
	
	// Настраиваем условное оформление
	НастроитьУсловноеОформление();
	
	// Если форма открыта для конкретной позиции
	Если Параметры.Свойство("ПозицияМеню") И ЗначениеЗаполнено(Параметры.ПозицияМеню) Тогда
		ОтборПозицияМеню = Параметры.ПозицияМеню;
		ОбновитьСписокОчереди();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОчередиПриАктивизацииСтроки(Элемент)
	
	// Обновляем панель детализации
	ОбновитьПанельДетализации();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСтатистику();
	ОбновитьСписокОчереди();
	
	ПоказатьОповещениеПользователя("Обновлено", , "Данные очереди обновлены");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВыбранные(Команда)
	
	// Получаем отмеченные строки
	МассивВыбранных = ПолучитьМассивВыбранныхСтрок();
	
	Если МассивВыбранных.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не выбрано ни одной позиции для выгрузки!");
		Возврат;
		
	КонецЕсли;
	
	// Запускаем выгрузку
	Результат = ВыгрузитьПозицииНаСервере(МассивВыбранных);
	
	// Показываем результат
	Если Результат.Успешно > 0 Тогда
		
		ТекстСообщения = СтрШаблон("Успешно выгружено: %1", Результат.Успешно);
		
		Если Результат.СОшибками > 0 Тогда
			ТекстСообщения = ТекстСообщения + СтрШаблон(", с ошибками: %1", Результат.СОшибками);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя("Выгрузка завершена", , ТекстСообщения);
		
	Иначе
		
		ПоказатьПредупреждение(, СтрШаблон("Все позиции выгружены с ошибками (%1)", Результат.СОшибками));
		
	КонецЕсли;
	
	// Обновляем данные
	ОбновитьСтатистику();
	ОбновитьСписокОчереди();
	
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	
	// Сбрасываем счетчик попыток для выбранных строк
	МассивВыбранных = ПолучитьМассивВыбранныхСтрок();
	
	Если МассивВыбранных.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не выбрано ни одной позиции!");
		Возврат;
		
	КонецЕсли;
	
	КоличествоСброшено = СброситьПопыткиНаСервере(МассивВыбранных);
	
	ПоказатьОповещениеПользователя(
		"Попытки сброшены",
		,
		СтрШаблон("Сброшено счетчиков попыток: %1", КоличествоСброшено));
		
	ОбновитьСтатистику();
	ОбновитьСписокОчереди();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзОчереди(Команда)
	
	МассивВыбранных = ПолучитьМассивВыбранныхСтрок();
	
	Если МассивВыбранных.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не выбрано ни одной позиции!");
		Возврат;
		
	КонецЕсли;
	
	// Подтверждение
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Удалить");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	ТекстВопроса = СтрШаблон("Удалить %1 позиций из очереди?", МассивВыбранных.Количество());
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("УдалитьИзОчередиЗавершение", ЭтотОбъект, МассивВыбранных),
		ТекстВопроса,
		Кнопки);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзОчередиЗавершение(Результат, МассивВыбранных) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КоличествоУдалено = УдалитьИзОчередиНаСервере(МассивВыбранных);
		
		ПоказатьОповещениеПользователя(
			"Удалено из очереди",
			,
			СтрШаблон("Удалено записей: %1", КоличествоУдалено));
			
		ОбновитьСтатистику();
		ОбновитьСписокОчереди();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсе(Команда)
	
	// Подтверждение
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, "Выгрузить");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВыгрузитьВсеЗавершение", ЭтотОбъект),
		"Выполнить принудительную выгрузку всей очереди?",
		Кнопки);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		// Запускаем полную выгрузку
		РезультатВыгрузки = ВыгрузитьВсеПозицииНаСервере();
		
		ТекстСообщения = СтрШаблон("Обработано: %1, успешно: %2, с ошибками: %3",
			РезультатВыгрузки.Всего,
			РезультатВыгрузки.Успешно,
			РезультатВыгрузки.СОшибками);
			
		ПоказатьОповещениеПользователя("Выгрузка завершена", , ТекстСообщения);
		
		ОбновитьСтатистику();
		ОбновитьСписокОчереди();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПозициюМеню(Команда)
	
	ТекущиеДанные = Элементы.СписокОчереди.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПозицияМеню) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ПозицияМеню);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюСинхронизации(Команда)
	
	ТекущиеДанные = Элементы.СписокОчереди.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПозицияМеню) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПозицияМеню", ТекущиеДанные.ПозицияМеню);
		
		ОткрытьФорму("Справочник.питМеню.Форма.MRS_ФормаМониторинга", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтбор(Команда)
	
	ОбновитьСписокОчереди();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьСтатистику()
	
	// Подсчитываем количество записей в очереди по статусам
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Очередь.Статус КАК Статус,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Очередь.ПозицияМеню) КАК Количество
	|ИЗ
	|	РегистрСведений.MRS_ОчередьВыгрузкиМенюSimphony КАК Очередь
	|
	|СГРУППИРОВАТЬ ПО
	|	Очередь.Статус";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВОчереди = 0;
	СОшибками = 0;
	ТребуетВнимания = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Статус = "ВОчереди" Тогда
			ВОчереди = Выборка.Количество;
		ИначеЕсли Выборка.Статус = "Ошибка" Тогда
			СОшибками = Выборка.Количество;
		ИначеЕсли Выборка.Статус = "ТребуетВнимания" Тогда
			ТребуетВнимания = Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	// Получаем информацию о последней обработке
	ПоследняяОбработка = MRS_ИнтеграцияSimphonyСервер.ПолучитьВремяПоследнейОбработкиОчереди();
	СледующаяОбработка = ПоследняяОбработка + 15 * 60; // + 15 минут
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокОчереди()
	
	// Формируем запрос к регистру очереди
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Очередь.ПозицияМеню КАК ПозицияМеню,
	|	Очередь.КассовыйУзел КАК КассовыйУзел,
	|	Очередь.Операция КАК Операция,
	|	Очередь.Статус КАК Статус,
	|	Очередь.ДатаПостановкиВОчередь КАК ДатаПостановкиВОчередь,
	|	Очередь.КоличествоПопыток КАК КоличествоПопыток,
	|	Очередь.СледующаяПопытка КАК СледующаяПопытка,
	|	Очередь.ТекстОшибки КАК ТекстОшибки,
	|	ЛОЖЬ КАК Выбран
	|ИЗ
	|	РегистрСведений.MRS_ОчередьВыгрузкиМенюSimphony КАК Очередь
	|ГДЕ
	|	(&КассовыйУзел = ЗНАЧЕНИЕ(ПланОбмена.питУдаленныеКассы.ПустаяСсылка)
	|		ИЛИ Очередь.КассовыйУзел = &КассовыйУзел)
	|	И (&ОтборПозицияМеню = ЗНАЧЕНИЕ(Справочник.питМеню.ПустаяСсылка)
	|		ИЛИ Очередь.ПозицияМеню = &ОтборПозицияМеню)
	|	И (Очередь.Статус = ""ВОчереди"" И &ПоказыватьВОчереди
	|		ИЛИ Очередь.Статус = ""Ошибка"" И &ПоказыватьСОшибками
	|		ИЛИ Очередь.Статус = ""ТребуетВнимания"" И &ПоказыватьТребуетВнимания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Очередь.ДатаПостановкиВОчередь";
	
	Запрос.УстановитьПараметр("КассовыйУзел", КассовыйУзел);
	Запрос.УстановитьПараметр("ОтборПозицияМеню", ?(ЗначениеЗаполнено(ОтборПозицияМеню), ОтборПозицияМеню, 
		Справочники.питМеню.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ПоказыватьВОчереди", ПоказыватьВОчереди);
	Запрос.УстановитьПараметр("ПоказыватьСОшибками", ПоказыватьСОшибками);
	Запрос.УстановитьПараметр("ПоказыватьТребуетВнимания", ПоказыватьТребуетВнимания);
	
	Результат = Запрос.Выполнить();
	СписокОчереди.Загрузить(Результат.Выгрузить());
	
	// Обновляем заголовок
	Элементы.ГруппаСписок.Заголовок = СтрШаблон("Очередь выгрузки (%1 позиций)", СписокОчереди.Количество());
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформление()
	
	// Очищаем существующее условное оформление
	УсловноеОформление.Элементы.Очистить();
	
	// Серый фон для позиций в очереди с отложенной попыткой
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокОчереди");
	
	ГруппаОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОчереди.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ВОчереди";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОчереди.СледующаяПопытка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("&ТекущаяДата");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
	// Желтый фон для ошибок с попытками
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокОчереди");
	
	ГруппаОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОчереди.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Ошибка";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОчереди.КоличествоПопыток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Хаки);
	
	// Красный фон для критических ошибок
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокОчереди");
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОчереди.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ТребуетВнимания";
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.РозовыйТуманный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	// Полужирный для позиций с 2+ попытками
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокОчереди");
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОчереди.КоличествоПопыток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыбранныхСтрок()
	
	МассивВыбранных = Новый Массив;
	
	Для Каждого Строка Из СписокОчереди Цикл
		
		Если Строка.Выбран Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("ПозицияМеню", Строка.ПозицияМеню);
			Структура.Вставить("КассовыйУзел", Строка.КассовыйУзел);
			
			МассивВыбранных.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВыбранных;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПанельДетализации()
	
	ТекущиеДанные = Элементы.СписокОчереди.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ДеталиПозиции = "";
		Возврат;
		
	КонецЕсли;
	
	// Формируем текст детализации
	Детали = "";
	Детали = Детали + "Позиция: " + Строка(ТекущиеДанные.ПозицияМеню) + Символы.ПС;
	Детали = Детали + "Операция: " + ТекущиеДанные.Операция + Символы.ПС;
	Детали = Детали + Символы.ПС;
	Детали = Детали + СтрШаблон("Статус: %1 (попытка %2 из 3)", 
		ТекущиеДанные.Статус, 
		ТекущиеДанные.КоличествоПопыток) + Символы.ПС;
	Детали = Детали + "Поставлено в очередь: " + Формат(ТекущиеДанные.ДатаПостановкиВОчередь, "ДЛФ=DT") + Символы.ПС;
	Детали = Детали + "Следующая попытка: " + Формат(ТекущиеДанные.СледующаяПопытка, "ДЛФ=DT") + Символы.ПС;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибки) Тогда
		Детали = Детали + Символы.ПС;
		Детали = Детали + "Последняя ошибка:" + Символы.ПС;
		Детали = Детали + ТекущиеДанные.ТекстОшибки;
	КонецЕсли;
	
	ДеталиПозиции = Детали;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПозицииНаСервере(МассивВыбранных)
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", 0);
	Результат.Вставить("СОшибками", 0);
	
	Для Каждого Элемент Из МассивВыбранных Цикл
		
		РезультатВыгрузки = MRS_ИнтеграцияSimphonyСервер.ВыгрузитьПозициюМенюИзОчереди(
			Элемент.ПозицияМеню,
			Элемент.КассовыйУзел);
			
		Если РезультатВыгрузки.Успех Тогда
			Результат.Успешно = Результат.Успешно + 1;
		Иначе
			Результат.СОшибками = Результат.СОшибками + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СброситьПопыткиНаСервере(МассивВыбранных)
	
	Счетчик = 0;
	
	Для Каждого Элемент Из МассивВыбранных Цикл
		
		НаборЗаписей = РегистрыСведений.MRS_ОчередьВыгрузкиМенюSimphony.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПозицияМеню.Установить(Элемент.ПозицияМеню);
		НаборЗаписей.Отбор.КассовыйУзел.Установить(Элемент.КассовыйУзел);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			Запись = НаборЗаписей[0];
			Запись.КоличествоПопыток = 0;
			Запись.Статус = "ВОчереди";
			Запись.СледующаяПопытка = ТекущаяДата();
			Запись.ТекстОшибки = "";
			
			НаборЗаписей.Записать();
			Счетчик = Счетчик + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Счетчик;
	
КонецФункции

&НаСервере
Функция УдалитьИзОчередиНаСервере(МассивВыбранных)
	
	Счетчик = 0;
	
	Для Каждого Элемент Из МассивВыбранных Цикл
		
		НаборЗаписей = РегистрыСведений.MRS_ОчередьВыгрузкиМенюSimphony.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПозицияМеню.Установить(Элемент.ПозицияМеню);
		НаборЗаписей.Отбор.КассовыйУзел.Установить(Элемент.КассовыйУзел);
		НаборЗаписей.Записать();
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Счетчик;
	
КонецФункции

&НаСервере
Функция ВыгрузитьВсеПозицииНаСервере()
	
	Результат = Новый Структура;
	Результат.Вставить("Всего", 0);
	Результат.Вставить("Успешно", 0);
	Результат.Вставить("СОшибками", 0);
	
	// Вызываем метод полной обработки очереди
	РезультатОбработки = MRS_ИнтеграцияSimphonyСервер.ОбработатьОчередьВыгрузки();
	
	Результат.Всего = РезультатОбработки.Обработано;
	Результат.Успешно = РезультатОбработки.Успешно;
	Результат.СОшибками = РезультатОбработки.СОшибками;
	
	Возврат Результат;
	
КонецФункции

