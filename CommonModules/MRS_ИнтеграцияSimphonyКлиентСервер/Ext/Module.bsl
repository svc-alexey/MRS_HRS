#Область ПрограммныйИнтерфейс

#Область Валидация

// Валидирует диапазон кода Major Group
//
// Параметры:
//  КодMajorGroup - Число - код Major Group для проверки
//
// Возвращаемое значение:
//  Структура:
//   * Валидно - Булево
//   * Сообщение - Строка
//
Функция ВалидироватьДиапазонMajorGroup(КодMajorGroup) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Валидно", Истина);
	Результат.Вставить("Сообщение", "");
	
	Если КодMajorGroup < 1000000 ИЛИ КодMajorGroup > 4999999 Тогда
		
		Результат.Валидно = Ложь;
		Результат.Сообщение = СтрШаблон(
			"Код MajorGroup (%1) должен быть в диапазоне: 1000000-1999999 (FOOD), 2000000-2999999 (ALC), 3000000-3999999 (N/ALC), 4000000-4999999 (OTHER)",
			КодMajorGroup);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Валидирует код Family Group
//
// Параметры:
//  КодFamilyGroup - Число - код Family Group для проверки
//
// Возвращаемое значение:
//  Структура:
//   * Валидно - Булево
//   * Сообщение - Строка
//
Функция ВалидироватьFamilyGroup(КодFamilyGroup) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Валидно", Истина);
	Результат.Вставить("Сообщение", "");
	
	Если КодFamilyGroup <= 0 Тогда
		
		Результат.Валидно = Ложь;
		Результат.Сообщение = СтрШаблон("Код FamilyGroup (%1) должен быть больше 0", КодFamilyGroup);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует текст ошибки валидации из массива ошибок
//
// Параметры:
//  МассивОшибок - Массив из Строка - массив сообщений об ошибках
//
// Возвращаемое значение:
//  Строка - объединенные сообщения об ошибках
//
Функция СформироватьТекстОшибкиВалидации(МассивОшибок) Экспорт
	
	Если МассивОшибок.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОшибки = "Ошибки валидации:" + Символы.ПС;
	
	Для Каждого Ошибка Из МассивОшибок Цикл
		ТекстОшибки = ТекстОшибки + "  - " + Ошибка + Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область ПредставленияСтатусов

// Возвращает представление статуса синхронизации
//
// Параметры:
//  Статус - ПеречислениеСсылка.MRS_СтатусыСинхронизацииSimphony - статус
//
// Возвращаемое значение:
//  Строка - представление статуса
//
Функция ПолучитьПредставлениеСтатуса(Статус) Экспорт
	
	Если Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.НеВыгружено") Тогда
		Возврат "Не выгружено";
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.ВОчереди") Тогда
		Возврат "В очереди";
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.Выгружено") Тогда
		Возврат "Выгружено";
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.Ошибка") Тогда
		Возврат "Ошибка";
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.ТребуетВнимания") Тогда
		Возврат "Требует внимания";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает цвет статуса для условного оформления
//
// Параметры:
//  Статус - ПеречислениеСсылка.MRS_СтатусыСинхронизацииSimphony
//
// Возвращаемое значение:
//  Цвет - цвет для отображения
//
Функция ПолучитьЦветСтатуса(Статус) Экспорт
	
	Если Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.НеВыгружено") Тогда
		Возврат WebЦвета.СинийСтальной; // Синий
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.ВОчереди") Тогда
		Возврат WebЦвета.Оранжевый; // Желтый/Оранжевый
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.Выгружено") Тогда
		Возврат WebЦвета.Зеленый; // Зеленый
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.Ошибка") Тогда
		Возврат WebЦвета.ОранжевоКрасный; // Оранжевый
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.MRS_СтатусыСинхронизацииSimphony.ТребуетВнимания") Тогда
		Возврат WebЦвета.Красный; // Красный
	Иначе
		Возврат WebЦвета.Черный;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСURL

// Разбирает URL на составные части
//
// Параметры:
//  URL - Строка - полный URL для разбора
//
// Возвращаемое значение:
//  Структура:
//   * Протокол - Строка - http или https
//   * Сервер - Строка - имя сервера или IP
//   * Порт - Число - порт подключения
//   * Путь - Строка - путь (например, /api/v1)
//
Функция РазобратьURL(URL) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Протокол", "http");
	Результат.Вставить("Сервер", "");
	Результат.Вставить("Порт", 80);
	Результат.Вставить("Путь", "");
	
	URLОбработанный = СокрЛП(URL);
	
	// Определение протокола
	Если СтрНачинаетсяС(НРег(URLОбработанный), "https://") Тогда
		
		Результат.Протокол = "https";
		Результат.Порт = 443;
		URLОбработанный = Сред(URLОбработанный, 9); // Убираем "https://"
		
	ИначеЕсли СтрНачинаетсяС(НРег(URLОбработанный), "http://") Тогда
		
		Результат.Протокол = "http";
		Результат.Порт = 80;
		URLОбработанный = Сред(URLОбработанный, 8); // Убираем "http://"
		
	КонецЕсли;
	
	// Разделение на сервер:порт и путь
	ПозицияСлеша = СтрНайти(URLОбработанный, "/");
	
	Если ПозицияСлеша > 0 Тогда
		
		СерверИПорт = Лев(URLОбработанный, ПозицияСлеша - 1);
		Результат.Путь = Сред(URLОбработанный, ПозицияСлеша);
		
	Иначе
		
		СерверИПорт = URLОбработанный;
		Результат.Путь = "";
		
	КонецЕсли;
	
	// Разделение сервера и порта
	ПозицияДвоеточия = СтрНайти(СерверИПорт, ":");
	
	Если ПозицияДвоеточия > 0 Тогда
		
		Результат.Сервер = Лев(СерверИПорт, ПозицияДвоеточия - 1);
		
		Попытка
			Результат.Порт = Число(Сред(СерверИПорт, ПозицияДвоеточия + 1));
		Исключение
			// Оставляем порт по умолчанию
		КонецПопытки;
		
	Иначе
		
		Результат.Сервер = СерверИПорт;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФорматированиеДанных

// Форматирует длительность в миллисекундах в читаемый вид
//
// Параметры:
//  ДлительностьМс - Число - длительность в миллисекундах
//
// Возвращаемое значение:
//  Строка - отформатированная строка
//
Функция ФорматироватьДлительность(ДлительностьМс) Экспорт
	
	Если ДлительностьМс < 1000 Тогда
		Возврат СтрШаблон("%1 мс", ДлительностьМс);
	ИначеЕсли ДлительностьМс < 60000 Тогда
		Возврат СтрШаблон("%1 сек", Формат(ДлительностьМс / 1000, "ЧЦ=10; ЧДЦ=1"));
	Иначе
		Возврат СтрШаблон("%1 мин %2 сек", 
			Цел(ДлительностьМс / 60000), 
			Формат((ДлительностьМс % 60000) / 1000, "ЧЦ=10; ЧДЦ=0"));
	КонецЕсли;
	
КонецФункции

// Форматирует HTTP статус с описанием
//
// Параметры:
//  HTTPСтатус - Число - код HTTP статуса
//
// Возвращаемое значение:
//  Строка - описание статуса
//
Функция ФорматироватьHTTPСтатус(HTTPСтатус) Экспорт
	
	Если HTTPСтатус = 200 Тогда
		Возврат "200 OK";
	ИначеЕсли HTTPСтатус = 400 Тогда
		Возврат "400 Bad Request";
	ИначеЕсли HTTPСтатус = 401 Тогда
		Возврат "401 Unauthorized";
	ИначеЕсли HTTPСтатус = 404 Тогда
		Возврат "404 Not Found";
	ИначеЕсли HTTPСтатус = 500 Тогда
		Возврат "500 Internal Server Error";
	ИначеЕсли HTTPСтатус = 0 Тогда
		Возврат "Timeout / Connection Error";
	Иначе
		Возврат СтрШаблон("HTTP %1", HTTPСтатус);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПрав

// Проверяет, является ли текущий пользователь администратором
//
// Возвращаемое значение:
//  Булево - Истина, если пользователь администратор
//
Функция ЭтоАдминистратор() Экспорт
	
	// TODO: Реализовать проверку роли администратора
	// Временно возвращаем Истина для всех
	Возврат Истина;
	
	// Будет:
	// Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

#КонецОбласти

#КонецОбласти

