#Область ПрограммныйИнтерфейс

#Область РегламентныеПроцедуры

// Очищает историю синхронизации старше 30 дней
//
Процедура ОчиститьИсториюСинхронизации() Экспорт
	
	НачалоТранзакции();
	
	Попытка
		
		ДатаГраницы = ТекущаяДатаСеанса() - 90 * 24 * 3600; // 30 дней назад
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МенюSimphonyИстория.ПозицияМеню КАК ПозицияМеню,
			|	МенюSimphonyИстория.ДатаВремя КАК ДатаВремя,
			|	МенюSimphonyИстория.УникальныйИдентификатор КАК УникальныйИдентификатор
			|ИЗ
			|	РегистрСведений.MRS_ИсторияСинхронизацииМенюSimphony КАК МенюSimphonyИстория
			|ГДЕ
			|	МенюSimphonyИстория.ДатаВремя < &ДатаГраницы";
		
		Запрос.УстановитьПараметр("ДатаГраницы", ДатаГраницы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.MRS_ИсторияСинхронизацииМенюSimphony.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПозицияМеню.Установить(Выборка.ПозицияМеню);
			НаборЗаписей.Отбор.ДатаВремя.Установить(Выборка.ДатаВремя);
			НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(Выборка.УникальныйИдентификатор);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ЗаписьЖурналаРегистрации("MRS.Simphony.ОчисткаИстории", УровеньЖурналаРегистрации.Информация,,,
			СтрШаблон("Удалено записей истории синхронизации: %1", Выборка.Количество()));
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("MRS.Simphony.ОчисткаИстории", УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет автоматическую выгрузку позиций меню из очереди
//
Процедура ВыполнитьАвтоматическуюВыгрузку() Экспорт
	
	МаксимальноПозицийЗаСеанс = 50;
	
	ЗаписьЖурналаРегистрации("MRS.Simphony.АвтоВыгрузка", УровеньЖурналаРегистрации.Информация,,,
		"Запуск автоматической выгрузки меню");
	
	// Выборка позиций из очереди
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	Очередь.ПозицияМеню КАК ПозицияМеню,
		|	Очередь.КассовыйУзел КАК КассовыйУзел,
		|	Очередь.Операция КАК Операция,
		|	Очередь.КоличествоПопыток КАК КоличествоПопыток
		|ИЗ
		|	РегистрСведений.MRS_ОчередьВыгрузкиМенюSimphony КАК Очередь
		|ГДЕ
		|	(Очередь.Статус = ""ВОчереди""
		|			ИЛИ Очередь.Статус = ""Ошибка""
		|				И Очередь.КоличествоПопыток < 3
		|				И (Очередь.СледующаяПопытка = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ Очередь.СледующаяПопытка <= &ТекущаяДата))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Очередь.ДатаПостановкиВОчередь";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации("MRS.Simphony.АвтоВыгрузка", УровеньЖурналаРегистрации.Информация,,,
			"Очередь пуста");
		Возврат;
		
	КонецЕсли;
	
	// Группировка по кассовым узлам для bulk-операций
	ТаблицаОчереди = Результат.Выгрузить();
	ТаблицаОчереди.Свернуть("КассовыйУзел", "");
	
	ВсегоОбработано = 0;
	ВсегоУспешно = 0;
	ВсегоОшибок = 0;
	
	Для Каждого СтрокаУзла Из ТаблицаОчереди Цикл
		
		// Получаем позиции для данного узла
		Отбор = Новый Структура("КассовыйУзел", СтрокаУзла.КассовыйУзел);
		МассивПозиций = ТаблицаОчереди.НайтиСтроки(Отбор);
		
		// Выгружаем пакетом
		РезультатВыгрузки = ВыгрузитьПакетПозиций(МассивПозиций, СтрокаУзла.КассовыйУзел);
		
		ВсегоОбработано = ВсегоОбработано + РезультатВыгрузки.Обработано;
		ВсегоУспешно = ВсегоУспешно + РезультатВыгрузки.Успешно;
		ВсегоОшибок = ВсегоОшибок + РезультатВыгрузки.Ошибок;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("MRS.Simphony.АвтоВыгрузка", УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон("Завершено. Обработано: %1, Успешно: %2, Ошибок: %3", ВсегоОбработано, ВсегоУспешно, ВсегоОшибок));
	
КонецПроцедуры

// Синхронизирует справочники из Simphony (RVC, Major Groups, Family Groups)
//
Процедура СинхронизироватьСправочники() Экспорт
	
	ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияСправочников", УровеньЖурналаРегистрации.Информация,,,
		"Запуск синхронизации справочников");
	
	Попытка
		
		СинхронизироватьRVCИерархию();
		СинхронизироватьMajorGroups();
		СинхронизироватьFamilyGroups();
		
		ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияСправочников", УровеньЖурналаРегистрации.Информация,,,
			"Синхронизация справочников завершена успешно");
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияСправочников", УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПозициямиМеню

// Выгружает позицию меню в Simphony
//
// Параметры:
//  Позиция - СправочникСсылка.питМеню - позиция меню для выгрузки
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы - кассовый узел
//
// Возвращаемое значение:
//  Структура:
//   * Успешно - Булево - признак успешной выгрузки
//   * Сообщение - Строка - сообщение о результате
//   * HTTPСтатус - Число - код HTTP ответа
//
Функция ВыгрузитьПозициюВSimphony(Позиция, КассовыйУзел) Экспорт
	
	Результат = Новый Структура("Успешно, Сообщение, HTTPСтатус", Ложь, "", 0);
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	CorrelationId = Строка(Новый УникальныйИдентификатор);
	
	Попытка
		
		// Валидация
		РезультатВалидации = ВалидироватьПозициюМеню(Позиция, КассовыйУзел);
		
		Если Не РезультатВалидации.Валидна Тогда
			
			Результат.Сообщение = МРС_ИнтеграцияSimphonyКлиентСервер.СформироватьТекстОшибкиВалидации(РезультатВалидации.Ошибки);
			ЗаписатьВИсториюСинхронизации(Позиция, "CREATE", "Ошибка", 400, Результат.Сообщение, CorrelationId, 0);
			ОбработатьОшибкуВыгрузки(Позиция, КассовыйУзел, 400, Результат.Сообщение);
			Возврат Результат;
			
		КонецЕсли;
		
		// Формирование JSON запроса
		ТелоЗапроса = СформироватьЗапросПозицииМеню(Позиция, КассовыйУзел);
		
		// Формирование заголовков
		Заголовки = СформироватьЗаголовки(ИмяПользователя(), CorrelationId);
		
		// Определение операции и endpoint
		Операция = "CREATE";
		Endpoint = "/menu-item";
		Метод = "PUT";
		
		// TODO: Когда будут добавлены реквизиты, проверять КодSimphony
		// Если ЗначениеЗаполнено(Позиция.КодSimphony) Тогда
		//     Операция = "UPDATE";
		// КонецЕсли;
		
		// Отправка запроса
		HTTPОтвет = ОтправитьЗапросAPI(Метод, Endpoint, ТелоЗапроса, Заголовки);
		
		ДлительностьМс = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
		
		// Обработка ответа
		Результат.HTTPСтатус = HTTPОтвет.КодСостояния;
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			// Успешная выгрузка
			ОтветJSON = ПарсироватьОтветJSON(HTTPОтвет);
			
			// TODO: Когда будут добавлены реквизиты, сохранять КодSimphony
			// СохранитьКодSimphony(Позиция, ОтветJSON.stringNumberId);
			// УстановитьСтатусСинхронизации(Позиция, "Выгружено");
			
			УдалитьИзОчереди(Позиция, КассовыйУзел);
			
			Результат.Успешно = Истина;
			Результат.Сообщение = "Успешно выгружено";
			
			ЗаписатьВИсториюСинхронизации(Позиция, Операция, "Успешно", 200, "OK", CorrelationId, ДлительностьМс);
			
		ИначеЕсли HTTPОтвет.КодСостояния = 400 Тогда
			
			// Ошибка валидации
			ОтветJSON = ПарсироватьОтветJSON(HTTPОтвет);
			Результат.Сообщение = СтрШаблон("Ошибка API (код %1): %2", ОтветJSON.code, ОтветJSON.message);
			
			// Проверка на дублирование stringNumberId
			Если ОтветJSON.code = 100001 Тогда
				
				// Генерация нового ID и повторная попытка
				ЗаписатьВИсториюСинхронизации(Позиция, Операция, "Ошибка", 400, Результат.Сообщение, CorrelationId, ДлительностьМс);
				// TODO: Реализовать перегенерацию stringNumberId и повтор
				
			Иначе
				
				// Другие ошибки валидации
				ОбработатьОшибкуВыгрузки(Позиция, КассовыйУзел, 400, Результат.Сообщение);
				ЗаписатьВИсториюСинхронизации(Позиция, Операция, "Ошибка", 400, Результат.Сообщение, CorrelationId, ДлительностьМс);
				
			КонецЕсли;
			
		ИначеЕсли HTTPОтвет.КодСостояния = 500 Тогда
			
			// Ошибка сервера - повторяем
			Результат.Сообщение = "Внутренняя ошибка сервера Simphony";
			ОбработатьОшибкуВыгрузки(Позиция, КассовыйУзел, 500, Результат.Сообщение);
			ЗаписатьВИсториюСинхронизации(Позиция, Операция, "Ошибка", 500, Результат.Сообщение, CorrelationId, ДлительностьМс);
			
		Иначе
			
			// Прочие ошибки
			Результат.Сообщение = СтрШаблон("HTTP %1: %2", HTTPОтвет.КодСостояния, HTTPОтвет.ПолучитьТелоКакСтроку());
			ОбработатьОшибкуВыгрузки(Позиция, КассовыйУзел, HTTPОтвет.КодСостояния, Результат.Сообщение);
			ЗаписатьВИсториюСинхронизации(Позиция, Операция, "Ошибка", HTTPОтвет.КодСостояния, Результат.Сообщение, CorrelationId, ДлительностьМс);
			
		КонецЕсли;
		
	Исключение
		
		// Таймаут или другая ошибка
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Сообщение = "Connection timeout или ошибка соединения";
		
		ДлительностьМс = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЗамера;
		
		ОбработатьОшибкуВыгрузки(Позиция, КассовыйУзел, 0, ТекстОшибки);
		ЗаписатьВИсториюСинхронизации(Позиция, "CREATE", "Таймаут", 0, ТекстОшибки, CorrelationId, ДлительностьМс);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Выгружает пакет позиций меню в Simphony
//
// Параметры:
//  МассивПозиций - Массив из СправочникСсылка.питМеню
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//
// Возвращаемое значение:
//  Структура - результаты выгрузки
//
Функция ВыгрузитьПакетПозиций(МассивПозиций, КассовыйУзел) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Обработано", 0);
	Результат.Вставить("Успешно", 0);
	Результат.Вставить("Ошибок", 0);
	
	Для Каждого СтрокаПозиции Из МассивПозиций Цикл
		
		Результат.Обработано = Результат.Обработано + 1;
		
		РезультатВыгрузки = ВыгрузитьПозициюВSimphony(СтрокаПозиции.ПозицияМеню, КассовыйУзел);
		
		Если РезультатВыгрузки.Успешно Тогда
			Результат.Успешно = Результат.Успешно + 1;
		Иначе
			Результат.Ошибок = Результат.Ошибок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует JSON запрос для отправки позиции меню в Simphony
//
// Параметры:
//  Позиция - СправочникСсылка.питМеню
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//
// Возвращаемое значение:
//  Строка - JSON для отправки
//
Функция СформироватьЗапросПозицииМеню(Позиция, КассовыйУзел) Экспорт
	
	// Получение данных позиции
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	питМеню.Наименование КАК Наименование,
		|	питМеню.Номенклатура КАК Номенклатура,
		|	питМеню.НомерВГруппе КАК НомерВГруппе,
		|	питМеню.Выключен КАК Выключен,
		|	питМеню.Номенклатура.ГруппаАналитическогоУчета.Родитель.MRS_КодMajorGroup КАК MajorGroup,
		|	питМеню.Номенклатура.ГруппаАналитическогоУчета.MRS_КодFamilyGroup КАК FamilyGroup
		|ИЗ
		|	Справочник.питМеню КАК питМеню
		|ГДЕ
		|	питМеню.Ссылка = &Позиция";
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ВызватьИсключение "Позиция меню не найдена";
	КонецЕсли;
	
	// Получение цены
	Цена = ПолучитьЦенуНоменклатуры(Выборка.Номенклатура, КассовыйУзел);
	
	// Получение КодSimphony узла
	КодSimphonyУзла = ПолучитьКодSimphonyУзла(КассовыйУзел);
	
	// TODO: Когда будет добавлен реквизит КодSimphony, генерировать или использовать существующий
	StringNumberId = Число(Лев(Строка(Позиция.УникальныйИдентификатор()), 8));
	
	// Формирование структуры JSON
	ЗапросJSON = Новый Структура;
	ЗапросJSON.Вставить("name", Выборка.Наименование);
	ЗапросJSON.Вставить("stringNumberId", StringNumberId);
	ЗапросJSON.Вставить("majGrpObjNum", Выборка.MajorGroup);
	ЗапросJSON.Вставить("famGrpObjNum", Выборка.FamilyGroup);
	ЗапросJSON.Вставить("isVisible", ?(Выборка.Выключен, 0, 1)); // Инвертирование логики
	ЗапросJSON.Вставить("hierStrucId", КодSimphonyУзла);
	ЗапросJSON.Вставить("menuItemClass", 1001); // Константа
	ЗапросJSON.Вставить("price", Цена);
	ЗапросJSON.Вставить("fileNum", Выборка.НомерВГруппе);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ЗапросJSON);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Валидирует позицию меню перед выгрузкой
//
// Параметры:
//  Позиция - СправочникСсылка.питМеню
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//
// Возвращаемое значение:
//  Структура:
//   * Валидна - Булево
//   * Ошибки - Массив из Строка
//
Функция ВалидироватьПозициюМеню(Позиция, КассовыйУзел) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Валидна", Истина);
	Результат.Вставить("Ошибки", Новый Массив);
	
	// Получение данных для валидации
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	питМеню.Наименование КАК Наименование,
		|	питМеню.Номенклатура КАК Номенклатура,
		|	питМеню.Номенклатура.ГруппаАналитическогоУчета.Родитель.MRS_КодMajorGroup КАК MajorGroup,
		|	питМеню.Номенклатура.ГруппаАналитическогоУчета.MRS_КодFamilyGroup КАК FamilyGroup
		|ИЗ
		|	Справочник.питМеню КАК питМеню
		|ГДЕ
		|	питМеню.Ссылка = &Позиция";
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Результат.Ошибки.Добавить("Позиция меню не найдена");
		Результат.Валидна = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	// Проверка номенклатуры
	Если Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
		Результат.Ошибки.Добавить("Не заполнена номенклатура");
	КонецЕсли;
	
	// Проверка MajorGroup
	Если Не ЗначениеЗаполнено(Выборка.MajorGroup) Тогда
		Результат.Ошибки.Добавить("Не заполнен код MajorGroup в классификаторе ГАУ");
	Иначе
		
		РезультатВалидацииMajor = МРС_ИнтеграцияSimphonyКлиентСервер.ВалидироватьДиапазонMajorGroup(Выборка.MajorGroup);
		
		Если Не РезультатВалидацииMajor.Валидно Тогда
			Результат.Ошибки.Добавить(РезультатВалидацииMajor.Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка FamilyGroup
	Если Не ЗначениеЗаполнено(Выборка.FamilyGroup) Тогда
		Результат.Ошибки.Добавить("Не заполнен код FamilyGroup в классификаторе ГАУ");
	Иначе
		
		РезультатВалидацииFamily = МРС_ИнтеграцияSimphonyКлиентСервер.ВалидироватьFamilyGroup(Выборка.FamilyGroup);
		
		Если Не РезультатВалидацииFamily.Валидно Тогда
			Результат.Ошибки.Добавить(РезультатВалидацииFamily.Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка цены
	Цена = ПолучитьЦенуНоменклатуры(Выборка.Номенклатура, КассовыйУзел);
	
	Если Цена = 0 Тогда
		Результат.Ошибки.Добавить(СтрШаблон("Не установлена цена для номенклатуры ""%1""", Выборка.Наименование));
	КонецЕсли;
	
	// Проверка кассового узла
	Если Не ЗначениеЗаполнено(КассовыйУзел) Тогда
		Результат.Ошибки.Добавить("Не указан кассовый узел");
	КонецЕсли;
	
	Если Результат.Ошибки.Количество() > 0 Тогда
		Результат.Валидна = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСОчередью

// Добавляет позицию в очередь выгрузки
//
// Параметры:
//  Позиция - СправочникСсылка.питМеню
//  Операция - Строка - CREATE, UPDATE, DELETE
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//
Процедура ДобавитьВОчередьВыгрузки(Позиция, Операция, КассовыйУзел) Экспорт
	
	НаборЗаписей = РегистрыСведений.MRS_ОчередьВыгрузкиМенюSimphony.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПозицияМеню.Установить(Позиция);
	НаборЗаписей.Отбор.КассовыйУзел.Установить(КассовыйУзел);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ПозицияМеню = Позиция;
	Запись.КассовыйУзел = КассовыйУзел;
	Запись.Операция = Операция;
	Запись.Статус = "ВОчереди";
	Запись.ДатаПостановкиВОчередь = ТекущаяДатаСеанса();
	Запись.КоличествоПопыток = 0;
	Запись.СледующаяПопытка = Дата(1, 1, 1);
	Запись.ТекстОшибки = "";
	
	НаборЗаписей.Записать();
	
	// TODO: Когда будет добавлен реквизит СтатусСинхронизацииSimphony
	// УстановитьСтатусСинхронизации(Позиция, "ВОчереди");
	
КонецПроцедуры

// Обрабатывает ошибку выгрузки, увеличивает счетчик попыток
//
// Параметры:
//  Позиция - СправочникСсылка.питМеню
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//  КодОшибки - Число
//  Сообщение - Строка
//
Процедура ОбработатьОшибкуВыгрузки(Позиция, КассовыйУзел, КодОшибки, Сообщение) Экспорт
	
	// Получаем текущую запись очереди
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Очередь.КоличествоПопыток КАК КоличествоПопыток
		|ИЗ
		|	РегистрСведений.MRS_ОчередьВыгрузкиМенюSimphony КАК Очередь
		|ГДЕ
		|	Очередь.ПозицияМеню = &Позиция
		|	И Очередь.КассовыйУзел = &КассовыйУзел";
	
	Запрос.УстановитьПараметр("Позиция", Позиция);
	Запрос.УстановитьПараметр("КассовыйУзел", КассовыйУзел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоПопыток = 0;
	
	Если Выборка.Следующий() Тогда
		КоличествоПопыток = Выборка.КоличествоПопыток;
	КонецЕсли;
	
	КоличествоПопыток = КоличествоПопыток + 1;
	
	// Обновляем запись
	НаборЗаписей = РегистрыСведений.MRS_ОчередьВыгрузкиМенюSimphony.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПозицияМеню.Установить(Позиция);
	НаборЗаписей.Отбор.КассовыйУзел.Установить(КассовыйУзел);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ПозицияМеню = Позиция;
	Запись.КассовыйУзел = КассовыйУзел;
	Запись.КоличествоПопыток = КоличествоПопыток;
	Запись.ТекстОшибки = Лев(Сообщение, 500);
	
	Если КоличествоПопыток < 3 Тогда
		
		Запись.Статус = "Ошибка";
		Запись.СледующаяПопытка = ТекущаяДатаСеанса() + 300; // +5 минут
		
		// TODO: Когда будет добавлен реквизит СтатусСинхронизацииSimphony
		// УстановитьСтатусСинхронизации(Позиция, "Ошибка");
		
	Иначе
		
		Запись.Статус = "ТребуетВнимания";
		Запись.СледующаяПопытка = Дата(1, 1, 1);
		
		// TODO: Когда будет добавлен реквизит СтатусСинхронизацииSimphony
		// УстановитьСтатусСинхронизации(Позиция, "ТребуетВнимания");
		
		// TODO: Отправка уведомления администратору
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет позицию из очереди
//
// Параметры:
//  Позиция - СправочникСсылка.питМеню
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//
Процедура УдалитьИзОчереди(Позиция, КассовыйУзел) Экспорт
	
	НаборЗаписей = РегистрыСведений.MRS_ОчередьВыгрузкиМенюSimphony.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПозицияМеню.Установить(Позиция);
	НаборЗаписей.Отбор.КассовыйУзел.Установить(КассовыйУзел);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСAPI

// Отправляет HTTP запрос к API Simphony
//
// Параметры:
//  Метод - Строка - GET, POST, PUT, DELETE
//  Endpoint - Строка - /menu-item, /menu-items и т.д.
//  ТелоJSON - Строка - JSON тело запроса
//  Заголовки - Соответствие - HTTP заголовки
//
// Возвращаемое значение:
//  HTTPОтвет
//
Функция ОтправитьЗапросAPI(Метод, Endpoint, ТелоJSON, Заголовки)
	
	URLСервиса = Константы.MRS_URLСервисаSimphony.Получить();
	
	Если ПустаяСтрока(URLСервиса) Тогда
		ВызватьИсключение "Не установлен URL сервиса Simphony в константах";
	КонецЕсли;
	
	// Парсинг URL
	СтруктураURL = МРС_ИнтеграцияSimphonyКлиентСервер.РазобратьURL(URLСервиса);
	
	// Создание HTTP соединения
	ЗащищенноеСоединение = Неопределено;
	
	Если СтруктураURL.Протокол = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		СтруктураURL.Сервер,
		СтруктураURL.Порт,
		,
		,
		,
		30, // Таймаут 30 секунд
		ЗащищенноеСоединение
	);
	
	// Формирование запроса
	ПутьЗапроса = СтруктураURL.Путь + Endpoint;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьЗапроса);
	HTTPЗапрос.Заголовки = Заголовки;
	
	Если ЗначениеЗаполнено(ТелоJSON) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоJSON, КодировкаТекста.UTF8);
	КонецЕсли;
	
	// Отправка запроса
	Если Метод = "GET" Тогда
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	ИначеЕсли Метод = "POST" Тогда
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	ИначеЕсли Метод = "PUT" Тогда
		HTTPОтвет = Соединение.ВызватьHTTPМетод("PUT", HTTPЗапрос);
	ИначеЕсли Метод = "DELETE" Тогда
		HTTPОтвет = Соединение.Удалить(HTTPЗапрос);
	Иначе
		ВызватьИсключение СтрШаблон("Неподдерживаемый HTTP метод: %1", Метод);
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

// Парсит JSON ответ от API
//
// Параметры:
//  HTTPОтвет - HTTPОтвет
//
// Возвращаемое значение:
//  Структура - распарсенный JSON
//
Функция ПарсироватьОтветJSON(HTTPОтвет)
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если ПустаяСтрока(ТелоОтвета) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Формирует HTTP заголовки для запроса к API
//
// Параметры:
//  ИмяПользователя - Строка
//  CorrelationId - Строка - UUID запроса (опционально)
//
// Возвращаемое значение:
//  Соответствие - заголовки
//
Функция СформироватьЗаголовки(ИмяПользователя, CorrelationId = "")
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("X-User-Id", ИмяПользователя);
	
	Если ПустаяСтрока(CorrelationId) Тогда
		CorrelationId = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Заголовки.Вставить("X-Correlation-Id", CorrelationId);
	Заголовки.Вставить("X-Request-Id", Строка(Новый УникальныйИдентификатор));
	
	Возврат Заголовки;
	
КонецФункции

#КонецОбласти

#Область СинхронизацияСправочников

// Синхронизирует иерархию RVC (кассовые узлы)
//
Процедура СинхронизироватьRVCИерархию()
	
	Попытка
		
		Заголовки = СформироватьЗаголовки(ИмяПользователя());
		HTTPОтвет = ОтправитьЗапросAPI("GET", "/referencedata/rvc-hierarchy", "", Заголовки);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ОтветJSON = ПарсироватьОтветJSON(HTTPОтвет);
			
			Если ОтветJSON.Свойство("data") И ТипЗнч(ОтветJSON.data) = Тип("Массив") Тогда
				
				Для Каждого ЭлементRVC Из ОтветJSON.data Цикл
					
					// TODO: Обновление справочника питУдаленныеКассы
					// Требуется добавить реквизит КодSimphony в план обмена
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияRVC", УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон("Ошибка получения RVC: HTTP %1", HTTPОтвет.КодСостояния));
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияRVC", УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Синхронизирует справочник Major Groups
//
Процедура СинхронизироватьMajorGroups()
	
	Попытка
		
		Заголовки = СформироватьЗаголовки(ИмяПользователя());
		HTTPОтвет = ОтправитьЗапросAPI("GET", "/referencedata/major-groups", "", Заголовки);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ОтветJSON = ПарсироватьОтветJSON(HTTPОтвет);
			
			// TODO: Проверка соответствия с ГАУ.MRS_КодMajorGroup
			// Требуется добавить реквизиты в ГруппыАналитическогоУчетаНоменклатуры
			
			ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияMajorGroups", УровеньЖурналаРегистрации.Информация,,,
				"Синхронизация Major Groups выполнена");
			
		Иначе
			
			ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияMajorGroups", УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон("Ошибка получения Major Groups: HTTP %1", HTTPОтвет.КодСостояния));
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияMajorGroups", УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Синхронизирует справочник Family Groups
//
Процедура СинхронизироватьFamilyGroups()
	
	Попытка
		
		Заголовки = СформироватьЗаголовки(ИмяПользователя());
		HTTPОтвет = ОтправитьЗапросAPI("GET", "/referencedata/family-groups", "", Заголовки);
		
		Если HTTPОтвет.КодСостояния = 200 Тогда
			
			ОтветJSON = ПарсироватьОтветJSON(HTTPОтвет);
			
			// TODO: Проверка соответствия с ГАУ.MRS_КодFamilyGroup
			
			ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияFamilyGroups", УровеньЖурналаРегистрации.Информация,,,
				"Синхронизация Family Groups выполнена");
			
		Иначе
			
			ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияFamilyGroups", УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон("Ошибка получения Family Groups: HTTP %1", HTTPОтвет.КодСостояния));
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("MRS.Simphony.СинхронизацияFamilyGroups", УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

// Получает цену номенклатуры для кассового узла
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//
// Возвращаемое значение:
//  Число - цена
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, КассовыйУзел)
	
	// Получаем вид цен из кассового узла
	ВидЦен = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	питУдаленныеКассы.ВидЦен КАК ВидЦен
		|ИЗ
		|	ПланОбмена.питУдаленныеКассы КАК питУдаленныеКассы
		|ГДЕ
		|	питУдаленныеКассы.Ссылка = &КассовыйУзел";
	
	Запрос.УстановитьПараметр("КассовыйУзел", КассовыйУзел);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВидЦен = Выборка.ВидЦен;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦен) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Получаем цену
	ЗапросЦены = Новый Запрос;
	ЗапросЦены.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Номенклатура И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних";
	
	ЗапросЦены.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	ЗапросЦены.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросЦены.УстановитьПараметр("ВидЦен", ВидЦен);
	
	ВыборкаЦены = ЗапросЦены.Выполнить().Выбрать();
	
	Если ВыборкаЦены.Следующий() Тогда
		Возврат ВыборкаЦены.Цена;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Получает КодSimphony кассового узла
//
// Параметры:
//  КассовыйУзел - ПланОбменаСсылка.питУдаленныеКассы
//
// Возвращаемое значение:
//  Число - hierStrucId
//
Функция ПолучитьКодSimphonyУзла(КассовыйУзел)
	
	// TODO: Когда будет добавлен реквизит КодSimphony в питУдаленныеКассы
	// Пока возвращаем заглушку
	Возврат 3;
	
	// Будет:
	// Запрос = Новый Запрос;
	// Запрос.Текст = 
	//     "ВЫБРАТЬ
	//     |    питУдаленныеКассы.КодSimphony КАК КодSimphony
	//     |ИЗ
	//     |    ПланОбмена.питУдаленныеКассы КАК питУдаленныеКассы
	//     |ГДЕ
	//     |    питУдаленныеКассы.Ссылка = &КассовыйУзел";
	// 
	// Запрос.УстановитьПараметр("КассовыйУзел", КассовыйУзел);
	// 
	// Выборка = Запрос.Выполнить().Выбрать();
	// 
	// Если Выборка.Следующий() Тогда
	//     Возврат Выборка.КодSimphony;
	// КонецЕсли;
	// 
	// Возврат 0;
	
КонецФункции

// Записывает событие в историю синхронизации
//
// Параметры:
//  Позиция - СправочникСсылка.питМеню
//  Операция - Строка
//  Статус - Строка
//  HTTPСтатус - Число
//  Сообщение - Строка
//  CorrelationId - Строка
//  ДлительностьМс - Число
//
Процедура ЗаписатьВИсториюСинхронизации(Позиция, Операция, Статус, HTTPСтатус, Сообщение, CorrelationId, ДлительностьМс)
	
	НаборЗаписей = РегистрыСведений.MRS_ИсторияСинхронизацииМенюSimphony.СоздатьНаборЗаписей();
	
	Запись = НаборЗаписей.Добавить();
	Запись.ПозицияМеню = Позиция;
	Запись.ДатаВремя = ТекущаяДатаСеанса();
	Запись.УникальныйИдентификатор = CorrelationId;
	Запись.Операция = Операция;
	Запись.Статус = Статус;
	Запись.HTTPСтатус = HTTPСтатус;
	Запись.Сообщение = Лев(Сообщение, 1000);
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ДлительностьМс = ДлительностьМс;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
